{"version":3,"file":"src_assets_player_webtorrent_webtorrent-plugin_ts-src_shims_http_ts-src_shims_https_ts-src_sh-67ecba.chunk.js?v=7457","mappings":"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","sources":["webpack://peertube-client/./src/assets/player/webtorrent/peertube-chunk-store.ts","webpack://peertube-client/./src/assets/player/webtorrent/video-renderer.ts","webpack://peertube-client/./src/assets/player/webtorrent/webtorrent-plugin.ts","webpack://peertube-client/./src/shims/http.ts","webpack://peertube-client/./src/shims/https.ts","webpack://peertube-client/./src/shims/noop.ts","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\bittorrent-tracker\\lib\\client|socks","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\bittorrent-tracker\\lib|./common-node","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\bittorrent-tracker|./lib/client/http-tracker","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\bittorrent-tracker|./lib/client/udp-tracker","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\create-torrent|./get-files","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\create-torrent|is-file","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\parse-torrent|fs","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\pump|fs","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\readable-stream\\lib\\internal\\streams|util","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\readable-stream\\lib|util","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\simple-get|decompress-response","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\simple-websocket|ws","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\torrent-discovery|bittorrent-dht/client","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\torrent-discovery|bittorrent-lsd","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent\\lib|./server","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent\\lib|fs","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent\\lib|net","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent\\lib|os","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent\\lib|ut_pex","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent\\lib|utp-native","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent|./lib/conn-pool","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent|bittorrent-dht/client","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\webtorrent|load-ip-set"],"sourcesContent":["// From https://github.com/MinEduTDF/idb-chunk-store\r\n// We use temporary IndexDB (all data are removed on destroy) to avoid RAM issues\r\n// Thanks @santiagogil and @Feross\r\n\r\nimport { EventEmitter } from 'events'\r\nimport Dexie from 'dexie'\r\n\r\nclass ChunkDatabase extends Dexie {\r\n  chunks: Dexie.Table<{ id: number, buf: Buffer }, number>\r\n\r\n  constructor (dbname: string) {\r\n    super(dbname)\r\n\r\n    this.version(1).stores({\r\n      chunks: 'id'\r\n    })\r\n  }\r\n}\r\n\r\nclass ExpirationDatabase extends Dexie {\r\n  databases: Dexie.Table<{ name: string, expiration: number }, number>\r\n\r\n  constructor () {\r\n    super('webtorrent-expiration')\r\n\r\n    this.version(1).stores({\r\n      databases: 'name,expiration'\r\n    })\r\n  }\r\n}\r\n\r\nexport class PeertubeChunkStore extends EventEmitter {\r\n  private static readonly BUFFERING_PUT_MS = 1000\r\n  private static readonly CLEANER_INTERVAL_MS = 1000 * 60 // 1 minute\r\n  private static readonly CLEANER_EXPIRATION_MS = 1000 * 60 * 5 // 5 minutes\r\n\r\n  chunkLength: number\r\n\r\n  private pendingPut: { id: number, buf: Buffer, cb: Function }[] = []\r\n  // If the store is full\r\n  private memoryChunks: { [ id: number ]: Buffer | true } = {}\r\n  private databaseName: string\r\n  private putBulkTimeout: any\r\n  private cleanerInterval: any\r\n  private db: ChunkDatabase\r\n  private expirationDB: ExpirationDatabase\r\n  private readonly length: number\r\n  private readonly lastChunkLength: number\r\n  private readonly lastChunkIndex: number\r\n\r\n  constructor (chunkLength: number, opts: any) {\r\n    super()\r\n\r\n    this.databaseName = 'webtorrent-chunks-'\r\n\r\n    if (!opts) opts = {}\r\n    if (opts.torrent && opts.torrent.infoHash) this.databaseName += opts.torrent.infoHash\r\n    else this.databaseName += '-default'\r\n\r\n    this.setMaxListeners(100)\r\n\r\n    this.chunkLength = Number(chunkLength)\r\n    if (!this.chunkLength) throw new Error('First argument must be a chunk length')\r\n\r\n    this.length = Number(opts.length) || Infinity\r\n\r\n    if (this.length !== Infinity) {\r\n      this.lastChunkLength = (this.length % this.chunkLength) || this.chunkLength\r\n      this.lastChunkIndex = Math.ceil(this.length / this.chunkLength) - 1\r\n    }\r\n\r\n    this.db = new ChunkDatabase(this.databaseName)\r\n    // Track databases that expired\r\n    this.expirationDB = new ExpirationDatabase()\r\n\r\n    this.runCleaner()\r\n  }\r\n\r\n  put (index: number, buf: Buffer, cb: (err?: Error) => void) {\r\n    const isLastChunk = (index === this.lastChunkIndex)\r\n    if (isLastChunk && buf.length !== this.lastChunkLength) {\r\n      return this.nextTick(cb, new Error('Last chunk length must be ' + this.lastChunkLength))\r\n    }\r\n    if (!isLastChunk && buf.length !== this.chunkLength) {\r\n      return this.nextTick(cb, new Error('Chunk length must be ' + this.chunkLength))\r\n    }\r\n\r\n    // Specify we have this chunk\r\n    this.memoryChunks[index] = true\r\n\r\n    // Add it to the pending put\r\n    this.pendingPut.push({ id: index, buf, cb })\r\n    // If it's already planned, return\r\n    if (this.putBulkTimeout) return\r\n\r\n    // Plan a future bulk insert\r\n    this.putBulkTimeout = setTimeout(async () => {\r\n      const processing = this.pendingPut\r\n      this.pendingPut = []\r\n      this.putBulkTimeout = undefined\r\n\r\n      try {\r\n        await this.db.transaction('rw', this.db.chunks, () => {\r\n          return this.db.chunks.bulkPut(processing.map(p => ({ id: p.id, buf: p.buf })))\r\n        })\r\n      } catch (err) {\r\n        console.log('Cannot bulk insert chunks. Store them in memory.', { err })\r\n\r\n        processing.forEach(p => this.memoryChunks[ p.id ] = p.buf)\r\n      } finally {\r\n        processing.forEach(p => p.cb())\r\n      }\r\n    }, PeertubeChunkStore.BUFFERING_PUT_MS)\r\n  }\r\n\r\n  get (index: number, opts: any, cb: (err?: Error, buf?: Buffer) => void): void {\r\n    if (typeof opts === 'function') return this.get(index, null, opts)\r\n\r\n    // IndexDB could be slow, use our memory index first\r\n    const memoryChunk = this.memoryChunks[index]\r\n    if (memoryChunk === undefined) {\r\n      const err = new Error('Chunk not found') as any\r\n      err['notFound'] = true\r\n\r\n      return process.nextTick(() => cb(err))\r\n    }\r\n\r\n    // Chunk in memory\r\n    if (memoryChunk !== true) return cb(null, memoryChunk)\r\n\r\n    // Chunk in store\r\n    this.db.transaction('r', this.db.chunks, async () => {\r\n      const result = await this.db.chunks.get({ id: index })\r\n      if (result === undefined) return cb(null, Buffer.alloc(0))\r\n\r\n      const buf = result.buf\r\n      if (!opts) return this.nextTick(cb, null, buf)\r\n\r\n      const offset = opts.offset || 0\r\n      const len = opts.length || (buf.length - offset)\r\n      return cb(null, buf.slice(offset, len + offset))\r\n    })\r\n    .catch(err => {\r\n      console.error(err)\r\n      return cb(err)\r\n    })\r\n  }\r\n\r\n  close (cb: (err?: Error) => void) {\r\n    return this.destroy(cb)\r\n  }\r\n\r\n  async destroy (cb: (err?: Error) => void) {\r\n    try {\r\n      if (this.pendingPut) {\r\n        clearTimeout(this.putBulkTimeout)\r\n        this.pendingPut = null\r\n      }\r\n      if (this.cleanerInterval) {\r\n        clearInterval(this.cleanerInterval)\r\n        this.cleanerInterval = null\r\n      }\r\n\r\n      if (this.db) {\r\n        this.db.close()\r\n\r\n        await this.dropDatabase(this.databaseName)\r\n      }\r\n\r\n      if (this.expirationDB) {\r\n        this.expirationDB.close()\r\n        this.expirationDB = null\r\n      }\r\n\r\n      return cb()\r\n    } catch (err) {\r\n      console.error('Cannot destroy peertube chunk store.', err)\r\n      return cb(err)\r\n    }\r\n  }\r\n\r\n  private runCleaner () {\r\n    this.checkExpiration()\r\n\r\n    this.cleanerInterval = setInterval(async () => {\r\n      this.checkExpiration()\r\n    }, PeertubeChunkStore.CLEANER_INTERVAL_MS)\r\n  }\r\n\r\n  private async checkExpiration () {\r\n    let databasesToDeleteInfo: { name: string }[] = []\r\n\r\n    try {\r\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, async () => {\r\n        // Update our database expiration since we are alive\r\n        await this.expirationDB.databases.put({\r\n          name: this.databaseName,\r\n          expiration: new Date().getTime() + PeertubeChunkStore.CLEANER_EXPIRATION_MS\r\n        })\r\n\r\n        const now = new Date().getTime()\r\n        databasesToDeleteInfo = await this.expirationDB.databases.where('expiration').below(now).toArray()\r\n      })\r\n    } catch (err) {\r\n      console.error('Cannot update expiration of fetch expired databases.', err)\r\n    }\r\n\r\n    for (const databaseToDeleteInfo of databasesToDeleteInfo) {\r\n      await this.dropDatabase(databaseToDeleteInfo.name)\r\n    }\r\n  }\r\n\r\n  private async dropDatabase (databaseName: string) {\r\n    const dbToDelete = new ChunkDatabase(databaseName)\r\n    console.log('Destroying IndexDB database %s.', databaseName)\r\n\r\n    try {\r\n      await dbToDelete.delete()\r\n\r\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, () => {\r\n        return this.expirationDB.databases.where({ name: databaseName }).delete()\r\n      })\r\n    } catch (err) {\r\n      console.error('Cannot delete %s.', databaseName, err)\r\n    }\r\n  }\r\n\r\n  private nextTick <T> (cb: (err?: Error, val?: T) => void, err: Error, val?: T) {\r\n    process.nextTick(() => cb(err, val), undefined)\r\n  }\r\n}\r\n","// Thanks: https://github.com/feross/render-media\r\n// TODO: use render-media once https://github.com/feross/render-media/issues/32 is fixed\r\n\r\nconst MediaElementWrapper = require('mediasource')\r\nimport { extname } from 'path'\r\nconst videostream = require('videostream')\r\n\r\nconst VIDEOSTREAM_EXTS = [\r\n  '.m4a',\r\n  '.m4v',\r\n  '.mp4'\r\n]\r\n\r\ntype RenderMediaOptions = {\r\n  controls: boolean\r\n  autoplay: boolean\r\n}\r\n\r\nfunction renderVideo (\r\n  file: any,\r\n  elem: HTMLVideoElement,\r\n  opts: RenderMediaOptions,\r\n  callback: (err: Error, renderer: any) => void\r\n) {\r\n  validateFile(file)\r\n\r\n  return renderMedia(file, elem, opts, callback)\r\n}\r\n\r\nfunction renderMedia (file: any, elem: HTMLVideoElement, opts: RenderMediaOptions, callback: (err: Error, renderer?: any) => void) {\r\n  const extension = extname(file.name).toLowerCase()\r\n  let preparedElem: any\r\n  let currentTime = 0\r\n  let renderer: any\r\n\r\n  try {\r\n    if (VIDEOSTREAM_EXTS.indexOf(extension) >= 0) {\r\n      renderer = useVideostream()\r\n    } else {\r\n      renderer = useMediaSource()\r\n    }\r\n  } catch (err) {\r\n    return callback(err)\r\n  }\r\n\r\n  function useVideostream () {\r\n    prepareElem()\r\n\r\n\r\n    preparedElem.addEventListener('error', function onError (err: Error) {\r\n      preparedElem.removeEventListener('error', onError)\r\n\r\n      return callback(err)\r\n    })\r\n\r\n\r\n    preparedElem.addEventListener('loadedmetadata', onLoadStart)\r\n    return new videostream(file, preparedElem)\r\n  }\r\n\r\n  function useMediaSource (useVP9 = false) {\r\n    const codecs = getCodec(file.name, useVP9)\r\n\r\n\r\n    prepareElem()\r\n    preparedElem.addEventListener('error', function onError (err: Error) {\r\n      preparedElem.removeEventListener('error', onError)\r\n\r\n      // Try with vp9 before returning an error\r\n      if (codecs.indexOf('vp8') !== -1) return fallbackToMediaSource(true)\r\n\r\n      return callback(err)\r\n    })\r\n    preparedElem.addEventListener('loadedmetadata', onLoadStart)\r\n\r\n    const wrapper = new MediaElementWrapper(preparedElem)\r\n    const writable = wrapper.createWriteStream(codecs)\r\n    file.createReadStream().pipe(writable)\r\n\r\n    if (currentTime) preparedElem.currentTime = currentTime\r\n\r\n    return wrapper\r\n  }\r\n\r\n  function fallbackToMediaSource (useVP9 = false) {\r\n    if (useVP9 === true) console.log('Falling back to media source with VP9 enabled.')\r\n    else console.log('Falling back to media source..')\r\n\r\n    useMediaSource(useVP9)\r\n  }\r\n\r\n  function prepareElem () {\r\n    if (preparedElem === undefined) {\r\n      preparedElem = elem\r\n\r\n      preparedElem.addEventListener('progress', function () {\r\n        currentTime = elem.currentTime\r\n      })\r\n    }\r\n  }\r\n\r\n  function onLoadStart () {\r\n    preparedElem.removeEventListener('loadedmetadata', onLoadStart)\r\n\r\n\r\n    if (opts.autoplay) preparedElem.play()\r\n\r\n    callback(null, renderer)\r\n  }\r\n}\r\n\r\nfunction validateFile (file: any) {\r\n  if (file == null) {\r\n    throw new Error('file cannot be null or undefined')\r\n  }\r\n  if (typeof file.name !== 'string') {\r\n    throw new Error('missing or invalid file.name property')\r\n  }\r\n  if (typeof file.createReadStream !== 'function') {\r\n    throw new Error('missing or invalid file.createReadStream property')\r\n  }\r\n}\r\n\r\nfunction getCodec (name: string, useVP9 = false) {\r\n  const ext = extname(name).toLowerCase()\r\n  if (ext === '.mp4') {\r\n    return 'video/mp4; codecs=\"avc1.640029, mp4a.40.5\"'\r\n  }\r\n\r\n  if (ext === '.webm') {\r\n    if (useVP9 === true) return 'video/webm; codecs=\"vp9, opus\"'\r\n\r\n    return 'video/webm; codecs=\"vp8, vorbis\"'\r\n  }\r\n\r\n  return undefined\r\n}\r\n\r\nexport {\r\n  renderVideo\r\n}\r\n","import videojs from 'video.js'\r\nimport * as WebTorrent from 'webtorrent'\r\nimport { renderVideo } from './video-renderer'\r\nimport { LoadedQualityData, PlayerNetworkInfo, WebtorrentPluginOptions } from '../peertube-videojs-typings'\r\nimport { getRtcConfig, timeToInt, videoFileMaxByResolution, videoFileMinByResolution, isIOS, isSafari } from '../utils'\r\nimport { PeertubeChunkStore } from './peertube-chunk-store'\r\nimport {\r\n  getAverageBandwidthInStore,\r\n  getStoredMute,\r\n  getStoredP2PEnabled,\r\n  getStoredVolume,\r\n  saveAverageBandwidth\r\n} from '../peertube-player-local-storage'\r\nimport { VideoFile } from '@shared/models'\r\n\r\nconst CacheChunkStore = require('cache-chunk-store')\r\n\r\ntype PlayOptions = {\r\n  forcePlay?: boolean,\r\n  seek?: number,\r\n  delay?: number\r\n}\r\n\r\nconst Plugin = videojs.getPlugin('plugin')\r\n\r\nclass WebTorrentPlugin extends Plugin {\r\n  readonly videoFiles: VideoFile[]\r\n\r\n  private readonly playerElement: HTMLVideoElement\r\n\r\n  private readonly autoplay: boolean = false\r\n  private readonly startTime: number = 0\r\n  private readonly savePlayerSrcFunction: videojs.Player['src']\r\n  private readonly videoDuration: number\r\n  private readonly CONSTANTS = {\r\n    INFO_SCHEDULER: 1000, // Don't change this\r\n    AUTO_QUALITY_SCHEDULER: 3000, // Check quality every 3 seconds\r\n    AUTO_QUALITY_THRESHOLD_PERCENT: 30, // Bandwidth should be 30% more important than a resolution bitrate to change to it\r\n    AUTO_QUALITY_OBSERVATION_TIME: 10000, // Wait 10 seconds after having change the resolution before another check\r\n    AUTO_QUALITY_HIGHER_RESOLUTION_DELAY: 5000, // Buffering higher resolution during 5 seconds\r\n    BANDWIDTH_AVERAGE_NUMBER_OF_VALUES: 5 // Last 5 seconds to build average bandwidth\r\n  }\r\n\r\n  private readonly webtorrent = new WebTorrent({\r\n    tracker: {\r\n      rtcConfig: getRtcConfig()\r\n    },\r\n    dht: false\r\n  })\r\n\r\n  private currentVideoFile: VideoFile\r\n  private torrent: WebTorrent.Torrent\r\n\r\n  private renderer: any\r\n  private fakeRenderer: any\r\n  private destroyingFakeRenderer = false\r\n\r\n  private autoResolution = true\r\n  private autoResolutionPossible = true\r\n  private isAutoResolutionObservation = false\r\n  private playerRefusedP2P = false\r\n\r\n  private torrentInfoInterval: any\r\n  private autoQualityInterval: any\r\n  private addTorrentDelay: any\r\n  private qualityObservationTimer: any\r\n  private runAutoQualitySchedulerTimer: any\r\n\r\n  private downloadSpeeds: number[] = []\r\n\r\n  constructor (player: videojs.Player, options?: WebtorrentPluginOptions) {\r\n    super(player)\r\n\r\n    this.startTime = timeToInt(options.startTime)\r\n\r\n    // Disable auto play on iOS\r\n    this.autoplay = options.autoplay\r\n    this.playerRefusedP2P = !getStoredP2PEnabled()\r\n\r\n    this.videoFiles = options.videoFiles\r\n    this.videoDuration = options.videoDuration\r\n\r\n    this.savePlayerSrcFunction = this.player.src\r\n    this.playerElement = options.playerElement\r\n\r\n    this.player.ready(() => {\r\n      const playerOptions = this.player.options_\r\n\r\n      /*const volume = getStoredVolume()\r\n      if (volume !== undefined) this.player.volume(volume)\r\n\r\n      const muted = playerOptions.muted !== undefined ? playerOptions.muted : getStoredMute()\r\n      if (muted !== undefined) this.player.muted(muted)*/\r\n\r\n      this.player.duration(options.videoDuration)\r\n\r\n      this.initializePlayer()\r\n      this.runTorrentInfoScheduler()\r\n\r\n      this.player.one('play', () => {\r\n        // Don't run immediately scheduler, wait some seconds the TCP connections are made\r\n        this.runAutoQualitySchedulerTimer = setTimeout(() => this.runAutoQualityScheduler(), this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\r\n      })\r\n    })\r\n  }\r\n\r\n  dispose () {\r\n    clearTimeout(this.addTorrentDelay)\r\n    clearTimeout(this.qualityObservationTimer)\r\n    clearTimeout(this.runAutoQualitySchedulerTimer)\r\n\r\n    clearInterval(this.torrentInfoInterval)\r\n    clearInterval(this.autoQualityInterval)\r\n\r\n    // Don't need to destroy renderer, video player will be destroyed\r\n    this.flushVideoFile(this.currentVideoFile, false)\r\n\r\n    this.destroyFakeRenderer()\r\n  }\r\n\r\n  getCurrentResolutionId () {\r\n    return this.currentVideoFile ? this.currentVideoFile.resolution.id : -1\r\n  }\r\n\r\n  updateVideoFile (\r\n    videoFile?: VideoFile,\r\n    options: {\r\n      forcePlay?: boolean,\r\n      seek?: number,\r\n      delay?: number\r\n    } = {},\r\n    done: () => void = () => { /* empty */ }\r\n  ) {\r\n    // Automatically choose the adapted video file\r\n    if (!videoFile) {\r\n      const savedAverageBandwidth = getAverageBandwidthInStore()\r\n      videoFile = savedAverageBandwidth\r\n        ? this.getAppropriateFile(savedAverageBandwidth)\r\n        : this.pickAverageVideoFile()\r\n    }\r\n\r\n    if (!videoFile) {\r\n      \r\n      throw Error(`Can't update video file since videoFile is undefined.`)\r\n\r\n      /*\r\n\r\n      const error: { message: string, code?: number } = {\r\n        message: \"Can't update video file since videoFile is undefined.\"\r\n      }\r\n\r\n      this.player.tech(true).error = () => error as any\r\n      this.player.tech(true).trigger('error')\r\n\r\n      return\r\n\r\n\r\n      */\r\n    }\r\n\r\n    // Don't add the same video file once again\r\n    if (this.currentVideoFile !== undefined && this.currentVideoFile.magnetUri === videoFile.magnetUri) {\r\n      return\r\n    }\r\n\r\n    // Do not display error to user because we will have multiple fallback\r\n    this.disableErrorDisplay();\r\n\r\n    // Hack to \"simulate\" src link in video.js >= 6\r\n    // Without this, we can't play the video after pausing it\r\n    // https://github.com/videojs/video.js/blob/master/src/js/player.js#L1633\r\n    (this.player as any).src = () => true\r\n    const oldPlaybackRate = this.player.playbackRate()\r\n\r\n    const previousVideoFile = this.currentVideoFile\r\n    this.currentVideoFile = videoFile\r\n\r\n    // Don't try on iOS that does not support MediaSource\r\n    // Or don't use P2P if webtorrent is disabled\r\n    if (isIOS() || this.playerRefusedP2P) {\r\n      return this.fallbackToHttp(options, () => {\r\n        this.player.playbackRate(oldPlaybackRate)\r\n        return done()\r\n      })\r\n    }\r\n\r\n\r\n    this.addTorrent(this.currentVideoFile.magnetUri, previousVideoFile, options, () => {\r\n      this.player.playbackRate(oldPlaybackRate)\r\n      return done()\r\n    })\r\n\r\n    this.changeQuality()\r\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.currentVideoFile.resolution.id })\r\n  }\r\n\r\n  updateResolution (resolutionId: number, delay = 0) {\r\n    // Remember player state\r\n    const currentTime = this.player.currentTime()\r\n    const isPaused = this.player.paused()\r\n\r\n    // Hide bigPlayButton\r\n    if (!isPaused) {\r\n      this.player.bigPlayButton.hide()\r\n    }\r\n\r\n    // Audio-only (resolutionId === 0) gets special treatment\r\n    if (resolutionId === 0) {\r\n      // Audio-only: show poster, do not auto-hide controls\r\n      this.player.addClass('vjs-playing-audio-only-content')\r\n      this.player.posterImage.show()\r\n    } else {\r\n      // Hide poster to have black background\r\n      this.player.removeClass('vjs-playing-audio-only-content')\r\n      this.player.posterImage.hide()\r\n    }\r\n\r\n    const newVideoFile = this.videoFiles.find(f => f.resolution.id === resolutionId)\r\n    const options = {\r\n      forcePlay: false,\r\n      delay,\r\n      seek: currentTime + (delay / 1000)\r\n    }\r\n\r\n    this.updateVideoFile(newVideoFile, options)\r\n  }\r\n\r\n  flushVideoFile (videoFile: VideoFile, destroyRenderer = true) {\r\n    if (videoFile !== undefined && this.webtorrent.get(videoFile.magnetUri)) {\r\n      if (destroyRenderer === true && this.renderer && this.renderer.destroy) this.renderer.destroy()\r\n\r\n      this.webtorrent.remove(videoFile.magnetUri)\r\n    }\r\n  }\r\n\r\n  enableAutoResolution () {\r\n    this.autoResolution = true\r\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.getCurrentResolutionId() })\r\n  }\r\n\r\n  disableAutoResolution (forbid = false) {\r\n    if (forbid === true) this.autoResolutionPossible = false\r\n\r\n    this.autoResolution = false\r\n    this.trigger('autoResolutionChange', { possible: this.autoResolutionPossible })\r\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.getCurrentResolutionId() })\r\n  }\r\n\r\n  isAutoResolutionPossible () {\r\n    return this.autoResolutionPossible\r\n  }\r\n\r\n  getTorrent () {\r\n    return this.torrent\r\n  }\r\n\r\n  getCurrentVideoFile () {\r\n    return this.currentVideoFile\r\n  }\r\n\r\n  private addTorrent (\r\n    magnetOrTorrentUrl: string,\r\n    previousVideoFile: VideoFile,\r\n    options: PlayOptions,\r\n    done: Function\r\n  ) {\r\n    if (!magnetOrTorrentUrl) return this.fallbackToHttp(options, done)\r\n\r\n    const oldTorrent = this.torrent\r\n    const torrentOptions = {\r\n      // Don't use arrow function: it breaks webtorrent (that uses `new` keyword)\r\n      store: function (chunkLength: number, storeOpts: any) {\r\n        return new CacheChunkStore(new PeertubeChunkStore(chunkLength, storeOpts), {\r\n          max: 100\r\n        })\r\n      }\r\n    }\r\n\r\n    this.torrent = this.webtorrent.add(magnetOrTorrentUrl, torrentOptions, torrent => {\r\n      if (oldTorrent) {\r\n        // Pause the old torrent\r\n        this.stopTorrent(oldTorrent)\r\n\r\n        // We use a fake renderer so we download correct pieces of the next file\r\n        if(options.delay) \r\n          this.renderFileInFakeElement(torrent.files[ 0 ], options.delay)\r\n      }\r\n\r\n      // Render the video in a few seconds? (on resolution change for example, we wait some seconds of the new video resolution)\r\n      this.addTorrentDelay = setTimeout(() => {\r\n\r\n        // We don't need the fake renderer anymore\r\n        this.destroyFakeRenderer()\r\n\r\n        const paused = this.player.paused()\r\n\r\n        this.flushVideoFile(previousVideoFile)\r\n\r\n        // Update progress bar (just for the UI), do not wait rendering\r\n        if (options.seek) this.player.currentTime(options.seek)\r\n\r\n        const renderVideoOptions = { autoplay: false, controls: true }\r\n        renderVideo(torrent.files[ 0 ], this.playerElement, renderVideoOptions, (err, renderer) => {\r\n          this.renderer = renderer\r\n\r\n          if (err) return this.fallbackToHttp(options, done)\r\n\r\n          //this.playerElement.play()\r\n\r\n          setTimeout(() => {\r\n            return this.tryToPlay(err => {\r\n\r\n              if (err) return done(err)\r\n  \r\n              if (options.seek) this.seek(options.seek)\r\n              if (options.forcePlay === false && paused === true) this.player.pause()\r\n  \r\n              return done()\r\n            })\r\n          }, 10)\r\n         \r\n        })\r\n      }, options.delay || 0)\r\n    })\r\n\r\n    this.torrent.on('error', (err: any) => console.error(err))\r\n\r\n    this.torrent.on('warning', (err: any) => {\r\n\r\n      //// TEMP, TO DO\r\n\r\n      /*if (err.message.indexOf('Error connecting to wss') !== -1 || err.message.indexOf('Unsupported tracker protocol') !== -1) {\r\n        this.fallbackToHttp(options, done)\r\n        return\r\n      }*/\r\n\r\n      // We don't support HTTP tracker but we don't care -> we use the web socket tracker\r\n      if (err.message.indexOf('Unsupported tracker protocol') !== -1) return\r\n\r\n      // Users don't care about issues with WebRTC, but developers do so log it in the console\r\n      if (err.message.indexOf('Ice connection failed') !== -1) {\r\n        console.log(err)\r\n        return\r\n      }\r\n\r\n      // Magnet hash is not up to date with the torrent file, add directly the torrent file\r\n      if (err.message.indexOf('incorrect info hash') !== -1) {\r\n        console.error('Incorrect info hash detected, falling back to torrent file.')\r\n        const newOptions = { forcePlay: true, seek: options.seek }\r\n        return this.addTorrent(this.torrent[ 'xs' ], previousVideoFile, newOptions, done)\r\n      }\r\n\r\n      // Remote instance is down\r\n      if (err.message.indexOf('from xs param') !== -1) {\r\n        this.handleError(err)\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  private tryToPlay (done?: (err?: Error) => void) {\r\n\r\n    if (!done) done = function () {}\r\n\r\n    const playPromise = this.player.play()\r\n\r\n    if (playPromise !== undefined) {\r\n\r\n      return playPromise.then(() => done()).catch((err: Error) => {\r\n          if (err.message.indexOf('The play() request') !== -1) {\r\n            return\r\n          }\r\n\r\n          console.log(\"PAUSE\")\r\n          this.player.pause()\r\n          this.player.posterImage.show()\r\n          this.player.removeClass('vjs-has-autoplay')\r\n          this.player.removeClass('vjs-has-big-play-button-clicked')\r\n          this.player.removeClass('vjs-playing-audio-only-content')\r\n\r\n          return done()\r\n        })\r\n    }\r\n\r\n    return done()\r\n\r\n    \r\n  }\r\n\r\n  private seek (time: number) {\r\n    this.player.currentTime(time)\r\n    this.player.handleTechSeeked_()\r\n  }\r\n\r\n  private getAppropriateFile (averageDownloadSpeed?: number): VideoFile {\r\n    if (this.videoFiles === undefined) return undefined\r\n\r\n    const files = this.videoFiles.filter(f => f.resolution.id !== 0)\r\n\r\n    if (files.length === 0) return undefined\r\n    if (files.length === 1) return files[0]\r\n\r\n    // Don't change the torrent if the player ended\r\n    if (this.torrent && this.torrent.progress === 1 && this.player.ended()) return this.currentVideoFile\r\n\r\n    if (!averageDownloadSpeed) averageDownloadSpeed = this.getAndSaveActualDownloadSpeed()\r\n\r\n    // Limit resolution according to player height\r\n    const playerHeight = this.playerElement.offsetHeight\r\n\r\n    // We take the first resolution just above the player height\r\n    // Example: player height is 530px, we want the 720p file instead of 480p\r\n    let maxResolution = files[0].resolution.id\r\n    for (let i = files.length - 1; i >= 0; i--) {\r\n      const resolutionId = files[i].resolution.id\r\n      if (resolutionId !== 0 && resolutionId >= playerHeight) {\r\n        maxResolution = resolutionId\r\n        break\r\n      }\r\n    }\r\n\r\n    // Filter videos we can play according to our screen resolution and bandwidth\r\n    const filteredFiles = files.filter(f => f.resolution.id <= maxResolution)\r\n                               .filter(f => {\r\n                                 const fileBitrate = (f.size / this.videoDuration)\r\n                                 let threshold = fileBitrate\r\n\r\n                                 // If this is for a higher resolution or an initial load: add a margin\r\n                                 if (!this.currentVideoFile || f.resolution.id > this.currentVideoFile.resolution.id) {\r\n                                   threshold += ((fileBitrate * this.CONSTANTS.AUTO_QUALITY_THRESHOLD_PERCENT) / 100)\r\n                                 }\r\n\r\n                                 return averageDownloadSpeed > threshold\r\n                               })\r\n\r\n    // If the download speed is too bad, return the lowest resolution we have\r\n    if (filteredFiles.length === 0) return videoFileMinByResolution(files)\r\n\r\n    return videoFileMaxByResolution(filteredFiles)\r\n  }\r\n\r\n  private getAndSaveActualDownloadSpeed () {\r\n    const start = Math.max(this.downloadSpeeds.length - this.CONSTANTS.BANDWIDTH_AVERAGE_NUMBER_OF_VALUES, 0)\r\n    const lastDownloadSpeeds = this.downloadSpeeds.slice(start, this.downloadSpeeds.length)\r\n    if (lastDownloadSpeeds.length === 0) return -1\r\n\r\n    const sum = lastDownloadSpeeds.reduce((a, b) => a + b)\r\n    const averageBandwidth = Math.round(sum / lastDownloadSpeeds.length)\r\n\r\n    // Save the average bandwidth for future use\r\n    saveAverageBandwidth(averageBandwidth)\r\n\r\n    return averageBandwidth\r\n  }\r\n\r\n  private initializePlayer () {\r\n    this.buildQualities()\r\n\r\n    if (this.autoplay) {\r\n      this.player.posterImage.hide()\r\n\r\n      return this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\r\n    }\r\n\r\n    // Proxy first play\r\n    const oldPlay = this.player.play.bind(this.player);\r\n    (this.player as any).play = () => {\r\n      this.player.addClass('vjs-has-big-play-button-clicked')\r\n      this.player.play = oldPlay\r\n\r\n      this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\r\n    }\r\n  }\r\n\r\n  private runAutoQualityScheduler () {\r\n    this.autoQualityInterval = setInterval(() => {\r\n\r\n      // Not initialized or in HTTP fallback\r\n      if (this.torrent === undefined || this.torrent === null) return\r\n      if (this.autoResolution === false) return\r\n      if (this.isAutoResolutionObservation === true) return\r\n\r\n      const file = this.getAppropriateFile()\r\n      let changeResolution = false\r\n      let changeResolutionDelay = 0\r\n\r\n      // Lower resolution\r\n      if (this.isPlayerWaiting() && file.resolution.id < this.currentVideoFile.resolution.id) {\r\n        changeResolution = true\r\n      } else if (file.resolution.id > this.currentVideoFile.resolution.id) { // Higher resolution\r\n        changeResolution = true\r\n        changeResolutionDelay = this.CONSTANTS.AUTO_QUALITY_HIGHER_RESOLUTION_DELAY\r\n      }\r\n\r\n      if (changeResolution === true) {\r\n        this.updateResolution(file.resolution.id, changeResolutionDelay)\r\n\r\n        // Wait some seconds in observation of our new resolution\r\n        this.isAutoResolutionObservation = true\r\n\r\n        this.qualityObservationTimer = setTimeout(() => {\r\n          this.isAutoResolutionObservation = false\r\n        }, this.CONSTANTS.AUTO_QUALITY_OBSERVATION_TIME)\r\n      }\r\n    }, this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\r\n  }\r\n\r\n  private isPlayerWaiting () {\r\n    return this.player && this.player.hasClass('vjs-waiting')\r\n  }\r\n\r\n  private runTorrentInfoScheduler () {\r\n    this.torrentInfoInterval = setInterval(() => {\r\n      \r\n\r\n      // Not initialized yet\r\n      if (this.torrent === undefined) return\r\n\r\n      // Http fallback\r\n      if (this.torrent === null) return this.player.trigger('p2pInfo', false)\r\n\r\n      // this.webtorrent.downloadSpeed because we need to take into account the potential old torrent too\r\n      if (this.webtorrent.downloadSpeed !== 0) this.downloadSpeeds.push(this.webtorrent.downloadSpeed)\r\n\r\n    \r\n\r\n      return this.player.trigger('p2pInfo', {\r\n        source: 'webtorrent',\r\n        http: {\r\n          downloadSpeed: 0,\r\n          uploadSpeed: 0,\r\n          downloaded: 0,\r\n          uploaded: 0\r\n        },\r\n        p2p: {\r\n          downloadSpeed: this.torrent.downloadSpeed,\r\n          numPeers: this.torrent.numPeers,\r\n          uploadSpeed: this.torrent.uploadSpeed,\r\n          downloaded: this.torrent.downloaded,\r\n          uploaded: this.torrent.uploaded\r\n        }\r\n      } as PlayerNetworkInfo)\r\n    }, this.CONSTANTS.INFO_SCHEDULER)\r\n  }\r\n\r\n  private fallbackToHttp (options: PlayOptions, done?: Function) {\r\n\r\n\r\n    const paused = this.player.paused()\r\n\r\n    this.disableAutoResolution(true)\r\n\r\n    this.flushVideoFile(this.currentVideoFile, true)\r\n    this.torrent = null\r\n\r\n    // Enable error display now this is our last fallback\r\n    this.player.one('error', () => this.enableErrorDisplay())\r\n\r\n    const httpUrl = this.currentVideoFile.fileUrl\r\n    this.player.src = this.savePlayerSrcFunction\r\n    this.player.src(httpUrl)\r\n\r\n    this.changeQuality()\r\n\r\n    // We changed the source, so reinit captions\r\n    this.player.trigger('sourcechange')\r\n\r\n    return this.tryToPlay(err => {\r\n\r\n      if (err && done) return done(err)\r\n\r\n      if (options.seek) this.seek(options.seek)\r\n      if (options.forcePlay === false && paused === true) {\r\n        console.log(\"PLAUSE\")\r\n        this.player.pause()\r\n      }\r\n\r\n      if (done) return done()\r\n    })\r\n  }\r\n\r\n  private handleError (err: Error | string) {\r\n    return this.player.trigger('customError', { err })\r\n  }\r\n\r\n  private enableErrorDisplay () {\r\n    this.player.addClass('vjs-error-display-enabled')\r\n  }\r\n\r\n  private disableErrorDisplay () {\r\n    this.player.removeClass('vjs-error-display-enabled')\r\n  }\r\n\r\n  private pickAverageVideoFile () {\r\n    if (this.videoFiles.length === 1) return this.videoFiles[0]\r\n\r\n    return this.videoFiles[Math.floor(this.videoFiles.length / 2)]\r\n  }\r\n\r\n  private stopTorrent (torrent: WebTorrent.Torrent) {\r\n    torrent.pause()\r\n    // Pause does not remove actual peers (in particular the webseed peer)\r\n    torrent.removePeer(torrent[ 'ws' ])\r\n  }\r\n\r\n  private renderFileInFakeElement (file: WebTorrent.TorrentFile, delay: number) {\r\n    this.destroyingFakeRenderer = false\r\n\r\n    const fakeVideoElem = document.createElement('video')\r\n    renderVideo(file, fakeVideoElem, { autoplay: false, controls: false }, (err, renderer) => {\r\n      this.fakeRenderer = renderer\r\n\r\n      // The renderer returns an error when we destroy it, so skip them\r\n      if (this.destroyingFakeRenderer === false && err) {\r\n        console.error('Cannot render new torrent in fake video element.', err)\r\n      }\r\n\r\n      // Load the future file at the correct time (in delay MS - 2 seconds)\r\n      fakeVideoElem.currentTime = this.player.currentTime() + (delay - 2000)\r\n    })\r\n  }\r\n\r\n  private destroyFakeRenderer () {\r\n    if (this.fakeRenderer) {\r\n      this.destroyingFakeRenderer = true\r\n\r\n      if (this.fakeRenderer.destroy) {\r\n        try {\r\n          this.fakeRenderer.destroy()\r\n        } catch (err) {\r\n          console.log('Cannot destroy correctly fake renderer.', err)\r\n        }\r\n      }\r\n      this.fakeRenderer = undefined\r\n    }\r\n  }\r\n\r\n  private buildQualities () {\r\n    const qualityLevelsPayload = []\r\n\r\n    for (const file of this.videoFiles) {\r\n      const representation = {\r\n        id: file.resolution.id,\r\n        label: this.buildQualityLabel(file),\r\n        height: file.resolution.id,\r\n        _enabled: true\r\n      }\r\n\r\n      this.player.qualityLevels().addQualityLevel(representation)\r\n\r\n      qualityLevelsPayload.push({\r\n        id: representation.id,\r\n        label: representation.label,\r\n        selected: false\r\n      })\r\n    }\r\n\r\n    const payload: LoadedQualityData = {\r\n      qualitySwitchCallback: (d: any) => this.qualitySwitchCallback(d),\r\n      qualityData: {\r\n        video: qualityLevelsPayload\r\n      }\r\n    }\r\n    this.player.tech(true).trigger('loadedqualitydata', payload)\r\n  }\r\n\r\n  private buildQualityLabel (file: VideoFile) {\r\n    let label = file.resolution.label\r\n\r\n    if (file.fps && file.fps >= 50) {\r\n      label += file.fps\r\n    }\r\n\r\n    return label\r\n  }\r\n\r\n  private qualitySwitchCallback (id: number) {\r\n    if (id === -1) {\r\n      if (this.autoResolutionPossible === true) this.enableAutoResolution()\r\n      return\r\n    }\r\n\r\n    this.disableAutoResolution()\r\n    this.updateResolution(id)\r\n  }\r\n\r\n  private changeQuality () {\r\n    const resolutionId = this.currentVideoFile.resolution.id\r\n    const qualityLevels = this.player.qualityLevels()\r\n\r\n    /*if (resolutionId === -1) {\r\n      qualityLevels.selectedIndex = -1\r\n      return\r\n    }*/\r\n\r\n    for (let i = 0; i < qualityLevels.length; i++) {\r\n      const q = qualityLevels[i]\r\n      if (q.height === resolutionId) qualityLevels.selectedIndex_ = i\r\n    }\r\n  }\r\n}\r\n\r\nvideojs.registerPlugin('webtorrent', WebTorrentPlugin)\r\nexport { WebTorrentPlugin }\r\n","module.exports = require('stream-http')\r\n","module.exports = require('https-browserify')\r\n","// Does nothing. Used to shim out node.js modules\r\n// which are no-ops in the browser.\r\nexport const NOOP = 0\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["EventEmitter","Dexie","ChunkDatabase","dbname","version","stores","chunks","ExpirationDatabase","databases","PeertubeChunkStore","chunkLength","opts","databaseName","torrent","infoHash","setMaxListeners","Number","Error","length","Infinity","lastChunkLength","lastChunkIndex","Math","ceil","db","expirationDB","runCleaner","index","buf","cb","isLastChunk","nextTick","memoryChunks","pendingPut","push","id","putBulkTimeout","setTimeout","__awaiter","processing","undefined","transaction","bulkPut","map","p","err","console","log","forEach","BUFFERING_PUT_MS","get","memoryChunk","process","result","Buffer","alloc","offset","len","slice","catch","error","destroy","clearTimeout","cleanerInterval","clearInterval","close","dropDatabase","checkExpiration","setInterval","CLEANER_INTERVAL_MS","databasesToDeleteInfo","put","name","expiration","Date","getTime","CLEANER_EXPIRATION_MS","now","where","below","toArray","databaseToDeleteInfo","dbToDelete","delete","val","MediaElementWrapper","require","extname","videostream","VIDEOSTREAM_EXTS","renderVideo","file","elem","callback","validateFile","renderMedia","extension","toLowerCase","preparedElem","currentTime","renderer","indexOf","useVideostream","useMediaSource","prepareElem","addEventListener","onError","removeEventListener","onLoadStart","useVP9","codecs","getCodec","fallbackToMediaSource","wrapper","writable","createWriteStream","createReadStream","pipe","autoplay","play","ext","videojs","WebTorrent","getRtcConfig","timeToInt","videoFileMaxByResolution","videoFileMinByResolution","isIOS","getAverageBandwidthInStore","getStoredP2PEnabled","saveAverageBandwidth","CacheChunkStore","Plugin","getPlugin","WebTorrentPlugin","player","options","INFO_SCHEDULER","AUTO_QUALITY_SCHEDULER","AUTO_QUALITY_THRESHOLD_PERCENT","AUTO_QUALITY_OBSERVATION_TIME","AUTO_QUALITY_HIGHER_RESOLUTION_DELAY","BANDWIDTH_AVERAGE_NUMBER_OF_VALUES","tracker","rtcConfig","dht","startTime","playerRefusedP2P","videoFiles","videoDuration","savePlayerSrcFunction","src","playerElement","ready","playerOptions","options_","duration","initializePlayer","runTorrentInfoScheduler","one","runAutoQualitySchedulerTimer","runAutoQualityScheduler","CONSTANTS","addTorrentDelay","qualityObservationTimer","torrentInfoInterval","autoQualityInterval","flushVideoFile","currentVideoFile","destroyFakeRenderer","resolution","videoFile","done","savedAverageBandwidth","getAppropriateFile","pickAverageVideoFile","magnetUri","disableErrorDisplay","oldPlaybackRate","playbackRate","previousVideoFile","fallbackToHttp","addTorrent","changeQuality","trigger","auto","autoResolution","resolutionId","delay","isPaused","paused","bigPlayButton","hide","addClass","posterImage","show","removeClass","newVideoFile","find","f","forcePlay","seek","updateVideoFile","destroyRenderer","webtorrent","remove","getCurrentResolutionId","forbid","autoResolutionPossible","possible","magnetOrTorrentUrl","oldTorrent","torrentOptions","store","storeOpts","max","add","stopTorrent","renderFileInFakeElement","files","renderVideoOptions","controls","tryToPlay","pause","on","message","newOptions","handleError","playPromise","then","time","handleTechSeeked_","averageDownloadSpeed","filter","progress","ended","getAndSaveActualDownloadSpeed","playerHeight","offsetHeight","maxResolution","i","filteredFiles","fileBitrate","size","threshold","start","downloadSpeeds","lastDownloadSpeeds","sum","reduce","a","b","averageBandwidth","round","buildQualities","oldPlay","bind","isAutoResolutionObservation","changeResolution","changeResolutionDelay","isPlayerWaiting","updateResolution","hasClass","downloadSpeed","source","http","uploadSpeed","downloaded","uploaded","p2p","numPeers","disableAutoResolution","enableErrorDisplay","httpUrl","fileUrl","floor","removePeer","destroyingFakeRenderer","fakeVideoElem","document","createElement","fakeRenderer","qualityLevelsPayload","representation","label","buildQualityLabel","height","_enabled","qualityLevels","addQualityLevel","selected","payload","qualitySwitchCallback","d","qualityData","video","tech","fps","enableAutoResolution","q","selectedIndex_","registerPlugin","module","exports","NOOP"],"sourceRoot":""}