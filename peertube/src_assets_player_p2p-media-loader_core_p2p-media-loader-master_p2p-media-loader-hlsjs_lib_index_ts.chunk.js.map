{"version":3,"file":"src_assets_player_p2p-media-loader_core_p2p-media-loader-master_p2p-media-loader-hlsjs_lib_index_ts.chunk.js?v=7457","mappings":"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","sources":["webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/bandwidth-approximator.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/http-media-manager.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/hybrid-loader.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/index.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/loader-interface.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/media-peer.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/p2p-media-manager.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/segments-memory-storage.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/stringly-typed-event-emitter.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/byte-range.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/engine.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/hlsjs-loader.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/index.ts","webpack://peertube-client/./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/segment-manager.ts","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\bittorrent-tracker\\lib\\client|socks","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\bittorrent-tracker\\lib|./common-node","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\bittorrent-tracker|./lib/client/http-tracker","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\bittorrent-tracker|./lib/client/udp-tracker","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\readable-stream\\lib\\internal\\streams|util","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\readable-stream\\lib|util","webpack://peertube-client/ignored|C:\\inetpub2020\\wwwroot\\peertube\\client\\node_modules\\simple-websocket|ws"],"sourcesContent":["/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Debug from \"debug\";\n\nconst debug = Debug(\"p2pml:bandwidth-approximator\");\n\nconst SMOOTH_INTERVAL = 2 * 1000;\nconst MEASURE_INTERVAL = 40 * 1000;\n\nclass NumberWithTime {\n    constructor(readonly value: number, readonly timeStamp: number) {}\n}\n\nexport class BandwidthApproximator {\n    private lastBytes: NumberWithTime[] = [];\n    private currentBytesSum = 0;\n    private lastBandwidth: NumberWithTime[] = [];\n\n    public addBytes = (bytes: number, timeStamp: number): void => {\n        debug(\"Add %d bytes.\", bytes)\n\n        this.lastBytes.push(new NumberWithTime(bytes, timeStamp));\n        this.currentBytesSum += bytes;\n\n        while (timeStamp - this.lastBytes[0].timeStamp > SMOOTH_INTERVAL) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.currentBytesSum -= this.lastBytes.shift()!.value;\n        }\n\n        const interval = Math.min(SMOOTH_INTERVAL, timeStamp);\n        this.lastBandwidth.push(new NumberWithTime(this.currentBytesSum / interval, timeStamp));\n    };\n\n    // in bytes per millisecond\n    public getBandwidth = (timeStamp: number): number => {\n        while (this.lastBandwidth.length !== 0 && timeStamp - this.lastBandwidth[0].timeStamp > MEASURE_INTERVAL) {\n            this.lastBandwidth.shift();\n        }\n\n        let maxBandwidth = 0;\n        for (const bandwidth of this.lastBandwidth) {\n            if (bandwidth.value > maxBandwidth) {\n                maxBandwidth = bandwidth.value;\n            }\n        }\n\n        debug(\"Max bandwidth: %d.\", maxBandwidth)\n\n        return maxBandwidth;\n    };\n\n    public getSmoothInterval = (): number => {\n        return SMOOTH_INTERVAL;\n    };\n\n    public getMeasureInterval = (): number => {\n        return MEASURE_INTERVAL;\n    };\n}\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Debug from \"debug\";\r\nimport 'abortcontroller-polyfill/dist/polyfill-patch-fetch'\r\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\r\nimport { Segment } from \"./loader-interface\";\r\nimport { SegmentValidatorCallback /*, XhrSetupCallback */, SegmentUrlBuilder } from \"./hybrid-loader\";\r\n\r\nclass FilteredEmitter extends STEEmitter<\r\n    \"segment-start-load\" | \"segment-loaded\" | \"segment-error\" | \"segment-size\" | \"bytes-downloaded\"\r\n> { }\r\n\r\nexport class HttpMediaManager extends FilteredEmitter {\r\n    private fetchRequests = new Map<string, { request?: Promise<Response>; fetchAbort: AbortController, segment: Segment, initialPriority: number, segmentUrl: string }>();\r\n    private failedSegments = new Map<string, number>();\r\n    private debug = Debug(\"p2pml:http-media-manager\");\r\n    private fetch: typeof fetch = (...args) => fetch(...args);\r\n\r\n    public constructor(\r\n        readonly settings: {\r\n            httpFailedSegmentTimeout: number;\r\n            httpUseRanges: boolean;\r\n            requiredSegmentsPriority: number;\r\n            segmentValidator?: SegmentValidatorCallback;\r\n            /* xhrSetup?: XhrSetupCallback; */\r\n            segmentUrlBuilder?: SegmentUrlBuilder;\r\n            localTransport?: typeof fetch;\r\n        }\r\n    ) {\r\n        super();\r\n\r\n        if (settings.localTransport) {\r\n            this.fetch = settings.localTransport;\r\n        }\r\n    }\r\n\r\n    public download = (segment: Segment, downloadedPieces?: ArrayBuffer[]): void => {\r\n        if (this.isDownloading(segment)) {\r\n            return;\r\n        }\r\n\r\n        console.log('download')\r\n\r\n        this.cleanTimedOutFailedSegments();\r\n\r\n        this.emit(\"segment-start-load\", segment);\r\n\r\n        const segmentUrl = this.buildSegmentUrl(segment);\r\n\r\n        const fetchAbort = new AbortController();\r\n\r\n        this.fetchRequests.set(segment.id, { fetchAbort, segment, initialPriority: segment.priority, segmentUrl });\r\n\r\n        this.debug(\"http segment download\", segmentUrl);\r\n\r\n        segment.requestUrl = segmentUrl;\r\n\r\n        const headers = new Headers();\r\n\r\n        if (segment.range) {\r\n            headers.append('Range', segment.range);\r\n        } else if (downloadedPieces !== undefined && this.settings.httpUseRanges) {\r\n            let bytesDownloaded = 0;\r\n            for (const piece of downloadedPieces) {\r\n                bytesDownloaded += piece.byteLength;\r\n            }\r\n\r\n            headers.append(\"Range\", `bytes=${bytesDownloaded}-`);\r\n\r\n            this.debug(\"continue download from\", bytesDownloaded);\r\n        } else {\r\n            downloadedPieces = undefined;\r\n        }\r\n\r\n        const signal = fetchAbort.signal;\r\n\r\n        const fetchRequest = this.fetch(segmentUrl, { headers, signal });\r\n\r\n        void this.setupFetchEvents(fetchRequest, segment, downloadedPieces)\r\n            .catch((err: Error) => {\r\n                /**\r\n                 * Handling all fetch errors here\r\n                 */\r\n\r\n                if (err.name === \"AbortError\") {\r\n                    /**\r\n                     * This may happen on video seeking\r\n                     * or halted video playing. In most\r\n                     * cases it is normal. For more info\r\n                     * look AbortController...\r\n                     */\r\n                    this.debug(\"Segment loading was aborted by user\", segment);\r\n                    return;\r\n                }\r\n\r\n                if (err.message === \"network error\") {\r\n                    this.debug(\"Segment loading is unavailable. No internet\", segment);\r\n\r\n                    const netError = Error(\"NETWORK_ERROR\");\r\n\r\n                    this.segmentFailure(segment, netError, segment.url);\r\n                    return;\r\n                }\r\n\r\n                if (err.message === \"Failed to fetch\") {\r\n                    /**\r\n                     * This error might occur in next cases:\r\n                     *   - Network error\r\n                     *   - Response with erroneous CORS headers\r\n                     *   - Unsupported protocol, e.g. HTTPS\r\n                     *   - Wrong request method\r\n                     */\r\n\r\n                    this.debug(\"Segment fetch failed\", segment);\r\n\r\n                    const fetchError = Error(\"FETCH_FAILED\");\r\n\r\n                    this.segmentFailure(segment, fetchError, segment.url);\r\n                    return;\r\n                }\r\n            });\r\n\r\n        /* if (this.settings.xhrSetup) {\r\n            this.settings.xhrSetup(xhr, segmentUrl);\r\n        } */\r\n\r\n        this.fetchRequests.set(segment.id, { request: fetchRequest, fetchAbort, segment, initialPriority: segment.priority, segmentUrl });\r\n\r\n        return;\r\n    };\r\n\r\n    public updatePriority = (segment: Segment): void => {\r\n        const request = this.fetchRequests.get(segment.id);\r\n\r\n        if (!request) {\r\n            throw new Error(\"Cannot update priority of not downloaded segment \" + segment.id);\r\n        }\r\n\r\n        // Segment is now in high priority\r\n        // If the segment URL changed, retry the request with the new URL\r\n        if (\r\n            segment.priority <= this.settings.requiredSegmentsPriority &&\r\n            request.initialPriority > this.settings.requiredSegmentsPriority &&\r\n            request.segmentUrl !== this.buildSegmentUrl(segment)\r\n        ) {\r\n            this.debug(\"aborting http segment abort because the segment is now in a high priority\", segment.id);\r\n            this.abort(segment)\r\n            this.download(segment)\r\n        }\r\n\r\n    }\r\n\r\n    public abort = (segment: Segment): void => {\r\n        const request = this.fetchRequests.get(segment.id);\r\n\r\n        console.log('abort command')\r\n\r\n        if (request) {\r\n\r\n            console.log(\"ABORT\")\r\n\r\n            request.fetchAbort.abort();\r\n            this.fetchRequests.delete(segment.id);\r\n            this.debug(\"http segment abort\", segment.id);\r\n        }\r\n    };\r\n\r\n    public isDownloading = (segment: Segment): boolean => {\r\n        return this.fetchRequests.has(segment.id);\r\n    };\r\n\r\n    public isFailed = (segment: Segment): boolean => {\r\n        const time = this.failedSegments.get(segment.id);\r\n        return time !== undefined && time > this.now();\r\n    };\r\n\r\n    public getActiveDownloads = (): ReadonlyMap<string, { segment: Segment }> => {\r\n        return this.fetchRequests;\r\n    };\r\n\r\n    public getActiveDownloadsCount = (): number => {\r\n        return this.fetchRequests.size;\r\n    };\r\n\r\n    public destroy = (): void => {\r\n        this.fetchRequests.forEach((request) => request.fetchAbort.abort());\r\n        this.fetchRequests.clear();\r\n    };\r\n\r\n    private setupFetchEvents = async (fetch: Promise<Response>, segment: Segment, downloadedPieces?: ArrayBuffer[]) => {\r\n        const fetchResponse = await fetch as Response & { body: ReadableStream };\r\n\r\n        const dataReader = fetchResponse.body.getReader();\r\n\r\n        const contentLengthStr = fetchResponse.headers.get(\"Content-Length\") as string;\r\n\r\n        const contentLength = Number.parseFloat(contentLengthStr);\r\n\r\n        const dataBytes: Uint8Array = new Uint8Array(contentLength);\r\n\r\n        let nextChunkPos = 0;\r\n\r\n        if (Array.isArray(downloadedPieces) && fetchResponse.status === 206) {\r\n            for (const piece of downloadedPieces) {\r\n                const pieceBytes = new Uint8Array(piece);\r\n\r\n                dataBytes.set(pieceBytes, nextChunkPos);\r\n\r\n                nextChunkPos = piece.byteLength;\r\n            }\r\n        }\r\n\r\n        let read;\r\n\r\n        while (!(read = await dataReader.read()).done) {\r\n            const chunkBytes = read.value;\r\n\r\n            dataBytes.set(chunkBytes, nextChunkPos);\r\n\r\n            nextChunkPos += chunkBytes.length;\r\n\r\n            /** Events emitters */\r\n\r\n            this.emit(\"bytes-downloaded\", segment, chunkBytes.length);\r\n\r\n            if (contentLength) {\r\n                this.emit(\"segment-size\", segment, contentLength);\r\n            }\r\n        }\r\n\r\n        if (fetchResponse.status < 200 || fetchResponse.status >= 300) {\r\n            const err = Error(`Segment failure with HTTP code ${fetchResponse.status}`);\r\n            this.segmentFailure(segment, err, fetchResponse.url);\r\n            return;\r\n        }\r\n\r\n        await this.segmentDownloadFinished(segment, dataBytes.buffer, fetchResponse);\r\n    };\r\n\r\n    private segmentDownloadFinished = async (segment: Segment, data: ArrayBuffer, fetchResponse: Response) => {\r\n        segment.responseUrl = fetchResponse.url;\r\n\r\n        if (this.settings.segmentValidator) {\r\n            try {\r\n                await this.settings.segmentValidator({ ...segment, data: data }, \"http\");\r\n            } catch (error) {\r\n                this.debug(\"segment validator failed\", error);\r\n                this.segmentFailure(segment, error, fetchResponse.url);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.fetchRequests.delete(segment.id);\r\n        this.emit(\"segment-loaded\", segment, data);\r\n    };\r\n\r\n    private segmentFailure = (segment: Segment, error: Error, responseUrl: string) => {\r\n        segment.responseUrl = responseUrl;\r\n\r\n        this.fetchRequests.delete(segment.id);\r\n        this.failedSegments.set(segment.id, this.now() + this.settings.httpFailedSegmentTimeout);\r\n        this.emit(\"segment-error\", segment, error);\r\n    };\r\n\r\n    private cleanTimedOutFailedSegments = () => {\r\n        const now = this.now();\r\n        const candidates: string[] = [];\r\n\r\n        this.failedSegments.forEach((time, id) => {\r\n            if (time < now) {\r\n                candidates.push(id);\r\n            }\r\n        });\r\n\r\n        candidates.forEach((id) => this.failedSegments.delete(id));\r\n    };\r\n\r\n    private buildSegmentUrl (segment: Segment) {\r\n        if (this.settings.segmentUrlBuilder) {\r\n            return this.settings.segmentUrlBuilder(segment);\r\n        }\r\n\r\n        return segment.url;\r\n    }\r\n\r\n    private now = () => performance.now();\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Debug from \"debug\";\r\nimport { EventEmitter } from \"events\";\r\nimport Peer from \"simple-peer\";\r\n\r\nimport { LoaderInterface, Events, Segment } from \"./loader-interface\";\r\nimport { HttpMediaManager } from \"./http-media-manager\";\r\nimport { P2PMediaManager } from \"./p2p-media-manager\";\r\nimport { MediaPeerSegmentStatus } from \"./media-peer\";\r\nimport { BandwidthApproximator } from \"./bandwidth-approximator\";\r\nimport { SegmentsMemoryStorage } from \"./segments-memory-storage\";\r\n/*\r\nconst defaultSettings: HybridLoaderSettings = {\r\n    cachedSegmentExpiration: 5 * 60 * 1000,\r\n    cachedSegmentsCount: 30,\r\n\r\n    useP2P: true,\r\n    consumeOnly: false,\r\n\r\n    requiredSegmentsPriority: 1,\r\n\r\n    simultaneousHttpDownloads: 2,\r\n    httpDownloadProbability: 0.1,\r\n    httpDownloadProbabilityInterval: 1000,\r\n    httpDownloadProbabilitySkipIfNoPeers: false,\r\n    httpFailedSegmentTimeout: 10000,\r\n    httpDownloadMaxPriority: 20,\r\n    httpDownloadInitialTimeout: 0,\r\n    httpDownloadInitialTimeoutPerSegment: 4000,\r\n    httpUseRanges: false,\r\n\r\n    simultaneousP2PDownloads: 3,\r\n    p2pDownloadMaxPriority: 20,\r\n    p2pSegmentDownloadTimeout: 60000,\r\n\r\n    webRtcMaxMessageSize: 64 * 1024 - 1,\r\n    trackerAnnounce: [\"wss://tracker.novage.com.ua\", \"wss://tracker.openwebtorrent.com\"],\r\n    peerRequestsPerAnnounce: 10,\r\n    rtcConfig: (Peer as { config: RTCConfiguration }).config,\r\n};*/\r\n\r\n\r\nconst defaultSettings: HybridLoaderSettings & { localTransport?: typeof fetch } = {\r\n    cachedSegmentExpiration: 10 * 60 * 1000,\r\n    cachedSegmentsCount: 1000,\r\n\r\n    useP2P: true,\r\n    consumeOnly: false,\r\n\r\n    requiredSegmentsPriority: 3,\r\n\r\n    simultaneousHttpDownloads: 2,\r\n    httpDownloadProbability: 0.06,\r\n    httpDownloadProbabilityInterval: 1000,\r\n    httpDownloadProbabilitySkipIfNoPeers: false,\r\n    httpFailedSegmentTimeout: 1500,\r\n    httpDownloadMaxPriority: 20,\r\n    httpDownloadInitialTimeout: 0,\r\n    httpDownloadInitialTimeoutPerSegment: 100, ///segment = 4000\r\n    httpUseRanges: false,\r\n\r\n    simultaneousP2PDownloads: 20,\r\n    p2pDownloadMaxPriority: 50,\r\n    p2pSegmentDownloadTimeout: 60000,\r\n\r\n    webRtcMaxMessageSize: 64 * 1024 - 1,\r\n    trackerAnnounce: [\"wss://tracker.novage.com.ua\", \"wss://tracker.openwebtorrent.com\"],\r\n    peerRequestsPerAnnounce: 10,\r\n    rtcConfig: (Peer as { config: RTCConfiguration }).config,\r\n};\r\n\r\nexport class HybridLoader extends EventEmitter implements LoaderInterface {\r\n    private readonly debug = Debug(\"p2pml:hybrid-loader\");\r\n    private readonly debugSegments = Debug(\"p2pml:hybrid-loader-segments\");\r\n    private readonly httpManager: HttpMediaManager;\r\n    private readonly p2pManager: P2PMediaManager;\r\n    private segmentsStorage: SegmentsStorage;\r\n    private segmentsQueue: Segment[] = [];\r\n    private readonly bandwidthApproximator = new BandwidthApproximator();\r\n    private readonly settings: HybridLoaderSettings & { localTransport?: typeof fetch };\r\n    private httpRandomDownloadInterval: ReturnType<typeof setInterval> | undefined;\r\n    private httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n    private masterSwarmId?: string;\r\n\r\n    public static isSupported = (): boolean => {\r\n        return window.RTCPeerConnection.prototype.createDataChannel !== undefined;\r\n    };\r\n\r\n    public constructor(settings: Partial<HybridLoaderSettings & { localTransport?: typeof fetch }> = {}) {\r\n        super();\r\n\r\n        this.settings = { ...defaultSettings, ...settings };\r\n\r\n        const { bufferedSegmentsCount } = settings as Record<string, unknown>;\r\n\r\n        if (typeof bufferedSegmentsCount === \"number\") {\r\n            if (settings.p2pDownloadMaxPriority === undefined) {\r\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\r\n            }\r\n\r\n            if (settings.httpDownloadMaxPriority === undefined) {\r\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\r\n            }\r\n        }\r\n\r\n        this.segmentsStorage =\r\n            this.settings.segmentsStorage === undefined\r\n                ? new SegmentsMemoryStorage(this.settings)\r\n                : this.settings.segmentsStorage;\r\n\r\n        this.debug(\"loader settings\", this.settings);\r\n\r\n        this.httpManager = this.createHttpManager();\r\n        this.httpManager.on(\"segment-start-load\", (segment: Segment) => this.onSegmentStartLoad(\"http\", segment));\r\n        this.httpManager.on(\"segment-loaded\", this.onSegmentLoaded);\r\n        this.httpManager.on(\"segment-error\", this.onSegmentError);\r\n        this.httpManager.on(\"segment-size\", this.onSegmentSize);\r\n        this.httpManager.on(\"bytes-downloaded\", (segment: Segment, bytes: number) => {\r\n            this.onPieceBytesDownloaded(\"http\", segment, bytes)\r\n        });\r\n\r\n        this.p2pManager = this.createP2PManager();\r\n        this.p2pManager.on(\"segment-start-load\", (segment: Segment) => this.onSegmentStartLoad(\"p2p\", segment));\r\n        this.p2pManager.on(\"segment-loaded\", this.onSegmentLoaded);\r\n        this.p2pManager.on(\"segment-error\", this.onSegmentError);\r\n        this.p2pManager.on(\"segment-size\", this.onSegmentSize);\r\n        this.p2pManager.on(\"peer-data-updated\", async () => {\r\n            if (this.masterSwarmId === undefined) {\r\n                return;\r\n            }\r\n\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        });\r\n        this.p2pManager.on(\"bytes-downloaded\", (segment: Segment, bytes: number, peerId: string) =>\r\n            this.onPieceBytesDownloaded(\"p2p\", segment, bytes, peerId)\r\n        );\r\n        this.p2pManager.on(\"bytes-uploaded\", (segment: Segment, bytes: number, peerId: string) =>\r\n            this.onPieceBytesUploaded(\"p2p\", segment, bytes, peerId)\r\n        );\r\n        this.p2pManager.on(\"peer-connected\", this.onPeerConnect);\r\n        this.p2pManager.on(\"peer-closed\", this.onPeerClose);\r\n        this.p2pManager.on(\"tracker-update\", this.onTrackerUpdate);\r\n    }\r\n\r\n    private createHttpManager = () => {\r\n        return new HttpMediaManager(this.settings);\r\n    };\r\n\r\n    private createP2PManager = () => {\r\n        return new P2PMediaManager(this.segmentsStorage, this.settings);\r\n    };\r\n\r\n    public load = async (segments: Segment[], streamSwarmId: string): Promise<void> => {\r\n        if (this.httpRandomDownloadInterval === undefined) {\r\n            // Do once on first call\r\n            this.httpRandomDownloadInterval = setInterval(\r\n                this.downloadRandomSegmentOverHttp,\r\n                this.settings.httpDownloadProbabilityInterval\r\n            );\r\n\r\n            if (\r\n                this.settings.httpDownloadInitialTimeout > 0 &&\r\n                this.settings.httpDownloadInitialTimeoutPerSegment > 0\r\n            ) {\r\n                // Initialize initial HTTP download timeout (i.e. download initial segments over P2P)\r\n                this.debugSegments(\r\n                    \"enable initial HTTP download timeout\",\r\n                    this.settings.httpDownloadInitialTimeout,\r\n                    \"per segment\",\r\n                    this.settings.httpDownloadInitialTimeoutPerSegment\r\n                );\r\n                this.httpDownloadInitialTimeoutTimestamp = this.now();\r\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment + 100);\r\n            }\r\n        }\r\n\r\n        if (segments.length > 0) {\r\n            this.masterSwarmId = segments[0].masterSwarmId;\r\n        }\r\n\r\n        if (this.masterSwarmId !== undefined) {\r\n            this.p2pManager.setStreamSwarmId(streamSwarmId, this.masterSwarmId);\r\n        }\r\n\r\n        this.debug(\"load segments\");\r\n\r\n        let updateSegmentsMap = false;\r\n\r\n        console.log(\"LOAD SEGMENTS\", this.segmentsQueue.length)\r\n\r\n        // stop all http requests and p2p downloads for segments that are not in the new load\r\n        for (const segment of this.segmentsQueue) {\r\n\r\n\r\n            if (!segments.find((f) => f.id === segment.id)) {\r\n                this.debug(\"remove segment\", segment.url);\r\n\r\n\r\n                if (this.httpManager.isDownloading(segment)) {\r\n                    updateSegmentsMap = true;\r\n                    this.httpManager.abort(segment);\r\n                } else {\r\n                    this.p2pManager.abort(segment);\r\n                }\r\n                this.emit(Events.SegmentAbort, segment);\r\n            }\r\n        }\r\n\r\n        if (this.debug.enabled) {\r\n            for (const segment of segments) {\r\n                if (!this.segmentsQueue.find((f) => f.id === segment.id)) {\r\n                    this.debug(\"add segment\", segment.url);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.segmentsQueue = segments;\r\n\r\n        if (this.masterSwarmId === undefined) {\r\n            return;\r\n        }\r\n\r\n        let storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n        updateSegmentsMap = this.processSegmentsQueue(storageSegments) || updateSegmentsMap;\r\n\r\n        if (await this.cleanSegmentsStorage()) {\r\n            storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            updateSegmentsMap = true;\r\n        }\r\n\r\n        if (updateSegmentsMap && !this.settings.consumeOnly) {\r\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n        }\r\n    };\r\n\r\n    public getSegment = async (id: string): Promise<Segment | undefined> => {\r\n        return this.masterSwarmId === undefined ? undefined : this.segmentsStorage.getSegment(id, this.masterSwarmId);\r\n    };\r\n\r\n    public getSettings = (): HybridLoaderSettings => {\r\n        return this.settings;\r\n    };\r\n\r\n    public getDetails = (): { peerId: string } => {\r\n        return {\r\n            peerId: this.p2pManager.getPeerId(),\r\n        };\r\n    };\r\n\r\n    public getBandwidthEstimate = (): number => {\r\n        return this.bandwidthApproximator.getBandwidth(this.now());\r\n    };\r\n\r\n    public destroy = async (): Promise<void> => {\r\n        if (this.httpRandomDownloadInterval !== undefined) {\r\n            clearInterval(this.httpRandomDownloadInterval);\r\n            this.httpRandomDownloadInterval = undefined;\r\n        }\r\n\r\n        this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n\r\n        this.segmentsQueue = [];\r\n        this.httpManager.destroy();\r\n        this.p2pManager.destroy();\r\n        this.masterSwarmId = undefined;\r\n        await this.segmentsStorage.destroy();\r\n    };\r\n\r\n    private processInitialSegmentTimeout = async () => {\r\n        if (this.httpRandomDownloadInterval === undefined) {\r\n            return; // Instance destroyed\r\n        }\r\n\r\n        if (this.masterSwarmId !== undefined) {\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n\r\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        }\r\n\r\n        if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\r\n            // Set one more timeout for a next segment\r\n            setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment);\r\n        }\r\n    };\r\n\r\n    private processSegmentsQueue = (storageSegments: Map<string, { segment: Segment }>) => {\r\n        this.debugSegments(\r\n            \"process segments queue. priority\",\r\n            this.segmentsQueue.length > 0 ? this.segmentsQueue[0].priority : 0\r\n        );\r\n\r\n        if (this.masterSwarmId === undefined || this.segmentsQueue.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        let updateSegmentsMap = false;\r\n        let segmentsMap: Map<string, MediaPeerSegmentStatus> | undefined;\r\n\r\n        let httpAllowed = true;\r\n\r\n        if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\r\n            let firstNotDownloadePriority: number | undefined;\r\n\r\n            for (const segment of this.segmentsQueue) {\r\n                if (!storageSegments.has(segment.id)) {\r\n                    firstNotDownloadePriority = segment.priority;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            const httpTimeout = this.now() - this.httpDownloadInitialTimeoutTimestamp;\r\n            httpAllowed =\r\n                httpTimeout >= this.settings.httpDownloadInitialTimeout ||\r\n                (firstNotDownloadePriority !== undefined &&\r\n                    httpTimeout > this.settings.httpDownloadInitialTimeoutPerSegment &&\r\n                    firstNotDownloadePriority <= 0);\r\n\r\n            if (httpAllowed) {\r\n                this.debugSegments(\"cancel initial HTTP download timeout - timed out\");\r\n                this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this.segmentsQueue.length; index++) {\r\n            const segment = this.segmentsQueue[index];\r\n\r\n            if (storageSegments.has(segment.id)) {\r\n                continue;\r\n            }\r\n\r\n            // Segment priority changed, notify http manager\r\n            if (this.httpManager.isDownloading(segment)) {\r\n                this.httpManager.updatePriority(segment);\r\n                continue;\r\n            }\r\n\r\n            if (\r\n                segment.priority <= this.settings.requiredSegmentsPriority &&\r\n                httpAllowed &&\r\n                !this.httpManager.isFailed(segment)\r\n            ) {\r\n                // Download required segments over HTTP\r\n                if (this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads) {\r\n                    // Not enough HTTP download resources. Abort one of the HTTP downloads.\r\n                    for (let i = this.segmentsQueue.length - 1; i > index; i--) {\r\n                        const segmentToAbort = this.segmentsQueue[i];\r\n                        if (this.httpManager.isDownloading(segmentToAbort)) {\r\n                            this.debugSegments(\"cancel HTTP download\", segmentToAbort.priority, segmentToAbort.url);\r\n                            this.httpManager.abort(segmentToAbort);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.httpManager.getActiveDownloadsCount() < this.settings.simultaneousHttpDownloads) {\r\n                    // Abort P2P download of the required segment if any and force HTTP download\r\n                    const downloadedPieces = this.p2pManager.abort(segment);\r\n                    this.httpManager.download(segment, downloadedPieces);\r\n                    this.debugSegments(\"HTTP download (priority)\", segment.priority, segment.url);\r\n                    updateSegmentsMap = true;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (this.p2pManager.isDownloading(segment)) {\r\n                continue;\r\n            }\r\n\r\n            if (segment.priority <= this.settings.requiredSegmentsPriority) {\r\n                // Download required segments over P2P\r\n                segmentsMap = segmentsMap ? segmentsMap : this.p2pManager.getOverallSegmentsMap();\r\n\r\n                if (segmentsMap.get(segment.id) !== MediaPeerSegmentStatus.Loaded) {\r\n                    continue;\r\n                }\r\n\r\n                if (this.p2pManager.getActiveDownloadsCount() >= this.settings.simultaneousP2PDownloads) {\r\n                    // Not enough P2P download resources. Abort one of the P2P downloads.\r\n                    for (let i = this.segmentsQueue.length - 1; i > index; i--) {\r\n                        const segmentToAbort = this.segmentsQueue[i];\r\n                        if (this.p2pManager.isDownloading(segmentToAbort)) {\r\n                            this.debugSegments(\"cancel P2P download\", segmentToAbort.priority, segmentToAbort.url);\r\n                            this.p2pManager.abort(segmentToAbort);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads) {\r\n                    if (this.p2pManager.download(segment)) {\r\n                        this.debugSegments(\"P2P download (priority)\", segment.priority, segment.url);\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (\r\n                this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads &&\r\n                segment.priority <= this.settings.p2pDownloadMaxPriority\r\n            ) {\r\n                if (this.p2pManager.download(segment)) {\r\n                    this.debugSegments(\"P2P download\", segment.priority, segment.url);\r\n                }\r\n            }\r\n        }\r\n\r\n        return updateSegmentsMap;\r\n    };\r\n\r\n    private downloadRandomSegmentOverHttp = async () => {\r\n        if (\r\n            this.masterSwarmId === undefined ||\r\n            this.httpRandomDownloadInterval === undefined ||\r\n            this.httpDownloadInitialTimeoutTimestamp !== -Infinity ||\r\n            this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads ||\r\n            (this.settings.httpDownloadProbabilitySkipIfNoPeers && this.p2pManager.getPeers().size === 0) ||\r\n            this.settings.consumeOnly\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n        const segmentsMap = this.p2pManager.getOverallSegmentsMap();\r\n\r\n        const pendingQueue = this.segmentsQueue.filter(\r\n            (s) =>\r\n                !this.p2pManager.isDownloading(s) &&\r\n                !this.httpManager.isDownloading(s) &&\r\n                !segmentsMap.has(s.id) &&\r\n                !this.httpManager.isFailed(s) &&\r\n                s.priority <= this.settings.httpDownloadMaxPriority &&\r\n                !storageSegments.has(s.id)\r\n        );\r\n\r\n        if (pendingQueue.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (Math.random() > this.settings.httpDownloadProbability * pendingQueue.length) {\r\n            return;\r\n        }\r\n\r\n        const segment = pendingQueue[Math.floor(Math.random() * pendingQueue.length)];\r\n        this.debugSegments(\"HTTP download (random)\", segment.priority, segment.url);\r\n        this.httpManager.download(segment);\r\n        this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n    };\r\n\r\n    private onSegmentStartLoad = (method: \"http\" | \"p2p\", segment: Segment) => {\r\n        this.emit(Events.SegmentStartLoad, method, segment);\r\n    };\r\n\r\n    private onPieceBytesDownloaded = (method: \"http\" | \"p2p\", segment: Segment, bytes: number, peerId?: string) => {\r\n        this.bandwidthApproximator.addBytes(bytes, this.now());\r\n        this.emit(Events.PieceBytesDownloaded, method, segment, bytes, peerId);\r\n\r\n    };\r\n\r\n    private onPieceBytesUploaded = (method: \"p2p\", segment: Segment, bytes: number, peerId?: string) => {\r\n        this.emit(Events.PieceBytesUploaded, method, segment, bytes, peerId);\r\n    };\r\n\r\n    private onSegmentLoaded = async (segment: Segment, data: ArrayBuffer, peerId?: string) => {\r\n        this.debugSegments(\"segment loaded\", segment.id, segment.url);\r\n\r\n        if (this.masterSwarmId === undefined) {\r\n            return;\r\n        }\r\n\r\n        segment.data = data;\r\n        segment.downloadBandwidth = this.bandwidthApproximator.getBandwidth(this.now());\r\n\r\n        await this.segmentsStorage.storeSegment(segment);\r\n        this.emit(Events.SegmentLoaded, segment, peerId);\r\n\r\n        const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n\r\n        this.processSegmentsQueue(storageSegments);\r\n        if (!this.settings.consumeOnly) {\r\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n        }\r\n    };\r\n\r\n    private onSegmentError = async (segment: Segment, details: unknown, peerId?: string) => {\r\n        this.debugSegments(\"segment error\", segment.id, segment.url, peerId, details);\r\n        this.emit(Events.SegmentError, segment, details, peerId);\r\n        if (this.masterSwarmId !== undefined) {\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        }\r\n    };\r\n\r\n    private onSegmentSize = async (segment: Segment, size: number) => {\r\n        this.debugSegments(\"segment size\", segment.id, size);\r\n        this.emit(Events.SegmentSize, segment, size);\r\n    };\r\n\r\n    private getStreamSwarmId = (segment: Segment) => {\r\n        return segment.streamId === undefined ? segment.masterSwarmId : `${segment.masterSwarmId}+${segment.streamId}`;\r\n    };\r\n\r\n    private createSegmentsMap = (storageSegments: Map<string, { segment: Segment }>) => {\r\n        const segmentsMap: { [key: string]: [string, number[]] } = {};\r\n\r\n        const addSegmentToMap = (segment: Segment, status: MediaPeerSegmentStatus) => {\r\n            const streamSwarmId = this.getStreamSwarmId(segment);\r\n            const segmentId = segment.sequence;\r\n\r\n            let segmentsIdsAndStatuses = segmentsMap[streamSwarmId];\r\n            if (segmentsIdsAndStatuses === undefined) {\r\n                segmentsIdsAndStatuses = [\"\", []];\r\n                segmentsMap[streamSwarmId] = segmentsIdsAndStatuses;\r\n            }\r\n            const segmentsStatuses = segmentsIdsAndStatuses[1];\r\n            segmentsIdsAndStatuses[0] += segmentsStatuses.length === 0 ? segmentId : `|${segmentId}`;\r\n            segmentsStatuses.push(status);\r\n        };\r\n\r\n        for (const storageSegment of storageSegments.values()) {\r\n            addSegmentToMap(storageSegment.segment, MediaPeerSegmentStatus.Loaded);\r\n        }\r\n\r\n        for (const download of this.httpManager.getActiveDownloads().values()) {\r\n            addSegmentToMap(download.segment, MediaPeerSegmentStatus.LoadingByHttp);\r\n        }\r\n\r\n        return segmentsMap;\r\n    };\r\n\r\n    private onPeerConnect = async (peer: { id: string }) => {\r\n        this.emit(Events.PeerConnect, peer);\r\n        if (!this.settings.consumeOnly && this.masterSwarmId !== undefined) {\r\n            this.p2pManager.sendSegmentsMap(\r\n                peer.id,\r\n                this.createSegmentsMap(await this.segmentsStorage.getSegmentsMap(this.masterSwarmId))\r\n            );\r\n        }\r\n    };\r\n\r\n    private onPeerClose = (peerId: string) => {\r\n        this.emit(Events.PeerClose, peerId);\r\n    };\r\n\r\n    private onTrackerUpdate = async (data: { incomplete?: number }) => {\r\n        if (\r\n            this.httpDownloadInitialTimeoutTimestamp !== -Infinity &&\r\n            data.incomplete !== undefined &&\r\n            data.incomplete <= 1\r\n        ) {\r\n            this.debugSegments(\"cancel initial HTTP download timeout - no peers\");\r\n\r\n            this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n\r\n            if (this.masterSwarmId !== undefined) {\r\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n\r\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    private cleanSegmentsStorage = async (): Promise<boolean> => {\r\n        if (this.masterSwarmId === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return this.segmentsStorage.clean(\r\n            this.masterSwarmId,\r\n            (id: string) => this.segmentsQueue.find((queueSegment) => queueSegment.id === id) !== undefined\r\n        );\r\n    };\r\n\r\n    private now = () => {\r\n        return performance.now();\r\n    };\r\n}\r\n\r\nexport interface SegmentsStorage {\r\n    storeSegment: (segment: Segment) => Promise<void>;\r\n    getSegmentsMap: (masterSwarmId: string) => Promise<Map<string, { segment: Segment }>>;\r\n    getSegment: (id: string, masterSwarmId: string) => Promise<Segment | undefined>;\r\n    clean: (masterSwarmId: string, lockedSegmentsFilter?: (id: string) => boolean) => Promise<boolean>;\r\n    destroy: () => Promise<void>;\r\n}\r\n\r\nexport type SegmentValidatorCallback = (segment: Segment, method: \"http\" | \"p2p\", peerId?: string) => Promise<void>;\r\n/* export type XhrSetupCallback = (xhr: XMLHttpRequest, url: string) => void; */\r\nexport type SegmentUrlBuilder = (segment: Segment) => string;\r\n\r\nexport type HybridLoaderSettings = {\r\n    /**\r\n     * Segment lifetime in cache. The segment is deleted from the cache if the last access time is greater than this value (in milliseconds).\r\n     */\r\n    cachedSegmentExpiration: number;\r\n\r\n    /**\r\n     * Max number of segments that can be stored in the cache.\r\n     */\r\n    cachedSegmentsCount: number;\r\n\r\n    /**\r\n     * Enable/Disable peers interaction.\r\n     */\r\n    useP2P: boolean;\r\n\r\n    /**\r\n     * The peer will not upload segments data to the P2P network but still download from others.\r\n     */\r\n    consumeOnly: boolean;\r\n\r\n    /**\r\n     * The maximum priority of the segments to be downloaded (if not available) as quickly as possible (i.e. via HTTP method).\r\n     */\r\n    requiredSegmentsPriority: number;\r\n\r\n    /**\r\n     * Max number of simultaneous downloads from HTTP source.\r\n     */\r\n    simultaneousHttpDownloads: number;\r\n\r\n    /**\r\n     * Probability of downloading remaining not downloaded segment in the segments queue via HTTP.\r\n     */\r\n    httpDownloadProbability: number;\r\n\r\n    /**\r\n     * Interval of the httpDownloadProbability check (in milliseconds).\r\n     */\r\n    httpDownloadProbabilityInterval: number;\r\n\r\n    /**\r\n     * Don't download segments over HTTP randomly when there is no peers.\r\n     */\r\n    httpDownloadProbabilitySkipIfNoPeers: boolean;\r\n\r\n    /**\r\n     * Timeout before trying to load segment again via HTTP after failed attempt (in milliseconds).\r\n     */\r\n    httpFailedSegmentTimeout: number;\r\n\r\n    /**\r\n     * Segments with higher priority will not be downloaded over HTTP.\r\n     */\r\n    httpDownloadMaxPriority: number;\r\n\r\n    /**\r\n     * Try to download initial segments over P2P if the value is > 0.\r\n     * But HTTP download will be forcibly enabled if there is no peers on tracker or\r\n     * single sequential segment P2P download is timed out (see httpDownloadInitialTimeoutPerSegment).\r\n     */\r\n    httpDownloadInitialTimeout: number;\r\n\r\n    /**\r\n     * Use HTTP ranges requests where it is possible.\r\n     * Allows to continue (and not start over) aborted P2P downloads over HTTP.\r\n     */\r\n    httpUseRanges: boolean;\r\n\r\n    /**\r\n     * If initial HTTP download timeout is enabled (see httpDownloadInitialTimeout)\r\n     * this parameter sets additional timeout for a single sequential segment download\r\n     * over P2P. It will cancel initial HTTP download timeout mode if a segment download is timed out.\r\n     */\r\n    httpDownloadInitialTimeoutPerSegment: number;\r\n\r\n    /**\r\n     * Max number of simultaneous downloads from peers.\r\n     */\r\n    simultaneousP2PDownloads: number;\r\n\r\n    /**\r\n     * Segments with higher priority will not be downloaded over P2P.\r\n     */\r\n    p2pDownloadMaxPriority: number;\r\n\r\n    /**\r\n     * Timeout to download a segment from a peer. If exceeded the peer is dropped.\r\n     */\r\n    p2pSegmentDownloadTimeout: number;\r\n\r\n    /**\r\n     * Max WebRTC message size. 64KiB - 1B should work with most of recent browsers. Set it to 16KiB for older browsers support.\r\n     */\r\n    webRtcMaxMessageSize: number;\r\n\r\n    /**\r\n     * Torrent trackers (announcers) to use.\r\n     */\r\n    trackerAnnounce: string[];\r\n\r\n    /**\r\n     * Number of requested peers in each announce for each tracker. Maximum is 10.\r\n     */\r\n    peerRequestsPerAnnounce: number;\r\n\r\n    /**\r\n     * An RTCConfiguration dictionary providing options to configure WebRTC connections.\r\n     */\r\n    rtcConfig: RTCConfiguration;\r\n\r\n    /**\r\n     * Segment validation callback - validates the data after it has been downloaded.\r\n     */\r\n    segmentValidator?: SegmentValidatorCallback;\r\n\r\n    /**\r\n     * XMLHttpRequest setup callback. Handle it when you need additional setup for requests made by the library.\r\n     */\r\n    /* xhrSetup?: unknown; */\r\n\r\n    /**\r\n     * Allow to modify the segment URL before HTTP request.\r\n     */\r\n    segmentUrlBuilder?: SegmentUrlBuilder;\r\n\r\n    /**\r\n     * A storage for the downloaded segments.\r\n     * By default the segments are stored in JavaScript memory.\r\n     */\r\n    segmentsStorage?: SegmentsStorage;\r\n};\r\n","/**\n * @license Apache-2.0\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const version = \"0.6.2\";\nexport * from \"./loader-interface\";\nexport * from \"./hybrid-loader\";\n\ndeclare global {\n    interface Window {\n        p2pml: Record<string, unknown>;\n    }\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { EventEmitter } from \"events\";\n\nexport type Segment = {\n    readonly id: string;\n    readonly url: string;\n    readonly masterSwarmId: string;\n    readonly masterManifestUri: string;\n    readonly streamId: string | undefined;\n    readonly sequence: string;\n    readonly range: string | undefined;\n    readonly priority: number;\n    data?: ArrayBuffer;\n    downloadBandwidth?: number;\n    requestUrl?: string;\n    responseUrl?: string;\n};\n\nexport enum Events {\n    /**\n     * Emitted when segment has been downloaded.\n     * Args: segment\n     */\n    SegmentLoaded = \"segment_loaded\",\n\n    /**\n     * Emitted when an error occurred while loading the segment.\n     * Args: segment, error\n     */\n    SegmentError = \"segment_error\",\n\n\n    /**\n     * Emitter when we the segment size is known\n     * Args: segment, size\n     */\n    SegmentSize = \"segment_size\",\n\n    /**\n     * Emitted for each segment that does not hit into a new segments queue when the load() method is called.\n     * Args: segment\n     */\n    SegmentAbort = \"segment_abort\",\n\n\n    /**\n     * Emitted when the loader started to load a segment\n     * Args: method, segment\n     */\n    SegmentStartLoad = \"segment_start_load\",\n\n    /**\n     * Emitted when a peer is connected.\n     * Args: peer\n     */\n    PeerConnect = \"peer_connect\",\n\n    /**\n     * Emitted when a peer is disconnected.\n     * Args: peerId\n     */\n    PeerClose = \"peer_close\",\n\n    /**\n     * Emitted when a segment piece has been downloaded.\n     * Args: method (can be \"http\" or \"p2p\" only), bytes\n     */\n    PieceBytesDownloaded = \"piece_bytes_downloaded\",\n\n    /**\n     * Emitted when a segment piece has been uploaded.\n     * Args: method (can be \"p2p\" only), bytes\n     */\n    PieceBytesUploaded = \"piece_bytes_uploaded\",\n}\n\nexport interface LoaderInterface extends EventEmitter {\n    on: ((eventName: string, listener: (...params: unknown[]) => void) => this) &\n        ((eventName: Events.SegmentStartLoad, listener: (method: \"http\" | \"p2p\", segment: Segment) => void) => this) &\n        ((eventName: Events.SegmentSize, listener: (segment: Segment, size: number) => void) => this) &\n        ((eventName: Events.PieceBytesDownloaded | Events.PieceBytesUploaded, listener: (method: \"http\" | \"p2p\", segment: Segment, bytes: number, peerId?: string) => void) => this) &\n        ((eventName: Events.SegmentLoaded, listener: (segment: Segment) => void) => this) &\n        ((eventName: Events.SegmentError, listener: (segment: Segment, error: unknown) => void) => this) &\n        ((eventName: Events.SegmentAbort, listener: (segment: Segment) => void) => this);\n    load: (segments: Segment[], streamSwarmId: string) => void;\n    getSegment: (id: string) => Promise<Segment | undefined>;\n    getSettings: () => unknown;\n    getDetails: () => unknown;\n    getBandwidthEstimate: () => number;\n    destroy: () => Promise<void>;\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nimport Debug from \"debug\";\nimport { Buffer } from \"buffer\";\n\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\n\nenum MediaPeerCommands {\n    SegmentData,\n    SegmentAbsent,\n    SegmentsMap,\n    SegmentRequest,\n    CancelSegmentRequest,\n}\n\ntype MediaPeerCommand =\n    | {\n          c:\n              | MediaPeerCommands.SegmentAbsent\n              | MediaPeerCommands.SegmentRequest\n              | MediaPeerCommands.CancelSegmentRequest;\n          i: string;\n      }\n    | {\n          c: MediaPeerCommands.SegmentsMap;\n          m: { [key: string]: [string, number[]] };\n      }\n    | {\n          c: MediaPeerCommands.SegmentData;\n          i: string;\n          s: number;\n      };\n\nexport enum MediaPeerSegmentStatus {\n    Loaded,\n    LoadingByHttp,\n}\n\nclass DownloadingSegment {\n    public bytesDownloaded = 0;\n    public pieces: ArrayBuffer[] = [];\n    constructor(readonly id: string, readonly size: number) {}\n}\n\nexport class MediaPeer extends STEEmitter<\n    | \"connect\"\n    | \"close\"\n    | \"data-updated\"\n    | \"segment-start-load\"\n    | \"segment-request\"\n    | \"segment-absent\"\n    | \"segment-loaded\"\n    | \"segment-error\"\n    | \"segment-timeout\"\n    | \"segment-size\"\n    | \"bytes-downloaded\"\n    | \"bytes-uploaded\"\n> {\n    public id: string;\n    public remoteAddress = \"\";\n    private downloadingSegmentId: string | null = null;\n    private downloadingSegment: DownloadingSegment | null = null;\n    private segmentsMap = new Map<string, MediaPeerSegmentStatus>();\n    private debug = Debug(\"p2pml:media-peer\");\n    private timer: ReturnType<typeof setTimeout> | null = null;\n\n    constructor(\n        // eslint-disable-next-line\n        readonly peer: any,\n        readonly settings: {\n            p2pSegmentDownloadTimeout: number;\n            webRtcMaxMessageSize: number;\n        }\n    ) {\n        super();\n\n        this.peer.on(\"connect\", this.onPeerConnect);\n        this.peer.on(\"close\", this.onPeerClose);\n        this.peer.on(\"error\", this.onPeerError);\n        this.peer.on(\"data\", this.onPeerData);\n\n        this.id = peer.id;\n    }\n\n    private onPeerConnect = () => {\n        this.debug(\"peer connect\", this.id, this);\n        this.remoteAddress = this.peer.remoteAddress;\n        this.emit(\"connect\", this);\n    };\n\n    private onPeerClose = () => {\n        this.debug(\"peer close\", this.id, this);\n        this.terminateSegmentRequest();\n        this.emit(\"close\", this);\n    };\n\n    private onPeerError = (error: unknown) => {\n        this.debug(\"peer error\", this.id, error, this);\n    };\n\n    private receiveSegmentPiece = (data: ArrayBuffer): void => {\n        if (!this.downloadingSegment) {\n            // The segment was not requested or canceled\n            this.debug(\"peer segment not requested\", this.id, this);\n            return;\n        }\n\n        this.downloadingSegment.bytesDownloaded += data.byteLength;\n        this.downloadingSegment.pieces.push(data);\n\n        const segmentId = this.downloadingSegment.id;\n        this.emit(\"bytes-downloaded\", this, segmentId, data.byteLength);\n\n        if (this.downloadingSegment.bytesDownloaded === this.downloadingSegment.size) {\n            const segmentData = new Uint8Array(this.downloadingSegment.size);\n            let offset = 0;\n            for (const piece of this.downloadingSegment.pieces) {\n                segmentData.set(new Uint8Array(piece), offset);\n                offset += piece.byteLength;\n            }\n\n            this.debug(\"peer segment download done\", this.id, segmentId, this);\n            this.terminateSegmentRequest();\n            this.emit(\"segment-loaded\", this, segmentId, segmentData.buffer);\n        } else if (this.downloadingSegment.bytesDownloaded > this.downloadingSegment.size) {\n            this.debug(\"peer segment download bytes mismatch\", this.id, segmentId, this);\n            this.terminateSegmentRequest();\n            this.emit(\"segment-error\", this, segmentId, \"Too many bytes received for segment\");\n        }\n    };\n\n    private getJsonCommand = (data: ArrayBuffer) => {\n        const bytes = new Uint8Array(data);\n\n        // Serialized JSON string check by first, second and last characters: '{\" .... }'\n        if (bytes[0] === 123 && bytes[1] === 34 && bytes[data.byteLength - 1] === 125) {\n            try {\n                return JSON.parse(new TextDecoder().decode(data)) as Record<string, unknown>;\n            } catch {\n                return null;\n            }\n        }\n\n        return null;\n    };\n\n    private onPeerData = (data: ArrayBuffer) => {\n        const command = this.getJsonCommand(data);\n\n        if (command === null) {\n            this.receiveSegmentPiece(data);\n            return;\n        }\n\n        if (this.downloadingSegment) {\n            this.debug(\"peer segment download is interrupted by a command\", this.id, this);\n\n            const segmentId = this.downloadingSegment.id;\n            this.terminateSegmentRequest();\n            this.emit(\"segment-error\", this, segmentId, \"Segment download is interrupted by a command\");\n            return;\n        }\n\n        this.debug(\"peer receive command\", this.id, command, this);\n\n        switch (command.c) {\n            case MediaPeerCommands.SegmentsMap:\n                this.segmentsMap = this.createSegmentsMap(command.m);\n                this.emit(\"data-updated\");\n                break;\n\n            case MediaPeerCommands.SegmentRequest:\n                this.emit(\"segment-request\", this, command.i);\n                break;\n\n            case MediaPeerCommands.SegmentData:\n                if (\n                    this.downloadingSegmentId &&\n                    this.downloadingSegmentId === command.i &&\n                    typeof command.s === \"number\" &&\n                    command.s >= 0\n                ) {\n                    this.downloadingSegment = new DownloadingSegment(command.i, command.s);\n                    this.emit(\"segment-start-load\", this.downloadingSegment.id)\n                    this.emit(\"segment-size\", this.downloadingSegment.id, this.downloadingSegment.size)\n                    this.cancelResponseTimeoutTimer();\n                }\n                break;\n\n            case MediaPeerCommands.SegmentAbsent:\n                if (this.downloadingSegmentId && this.downloadingSegmentId === command.i) {\n                    this.terminateSegmentRequest();\n                    this.segmentsMap.delete(command.i);\n                    this.emit(\"segment-absent\", this, command.i);\n                }\n                break;\n\n            case MediaPeerCommands.CancelSegmentRequest:\n                // TODO: peer stop sending buffer\n                break;\n\n            default:\n                break;\n        }\n    };\n\n    private createSegmentsMap = (segments: unknown) => {\n        if (!(segments instanceof Object)) {\n            return new Map<string, MediaPeerSegmentStatus>();\n        }\n\n        const segmentsMap = new Map<string, MediaPeerSegmentStatus>();\n\n        for (const streamSwarmId of Object.keys(segments)) {\n            const swarmData = (segments as Record<string, unknown>)[streamSwarmId];\n            if (\n                !(swarmData instanceof Array) ||\n                swarmData.length !== 2 ||\n                typeof swarmData[0] !== \"string\" ||\n                !(swarmData[1] instanceof Array)\n            ) {\n                return new Map<string, MediaPeerSegmentStatus>();\n            }\n\n            const segmentsIds = swarmData[0].split(\"|\");\n            const segmentsStatuses = swarmData[1] as MediaPeerSegmentStatus[];\n\n            if (segmentsIds.length !== segmentsStatuses.length) {\n                return new Map<string, MediaPeerSegmentStatus>();\n            }\n\n            for (let i = 0; i < segmentsIds.length; i++) {\n                const segmentStatus = segmentsStatuses[i];\n                if (typeof segmentStatus !== \"number\" || MediaPeerSegmentStatus[segmentStatus] === undefined) {\n                    return new Map<string, MediaPeerSegmentStatus>();\n                }\n\n                segmentsMap.set(`${streamSwarmId}+${segmentsIds[i]}`, segmentStatus);\n            }\n        }\n\n        return segmentsMap;\n    };\n\n    private sendCommand = (command: MediaPeerCommand): void => {\n        this.debug(\"peer send command\", this.id, command, this);\n        this.peer.write(JSON.stringify(command));\n    };\n\n    public destroy = (): void => {\n        this.debug(\"peer destroy\", this.id, this);\n        this.terminateSegmentRequest();\n        this.peer.destroy();\n    };\n\n    public getDownloadingSegmentId = (): string | null => {\n        return this.downloadingSegmentId;\n    };\n\n    public getSegmentsMap = (): Map<string, MediaPeerSegmentStatus> => {\n        return this.segmentsMap;\n    };\n\n    public sendSegmentsMap = (segmentsMap: { [key: string]: [string, number[]] }): void => {\n        this.sendCommand({ c: MediaPeerCommands.SegmentsMap, m: segmentsMap });\n    };\n\n    public sendSegmentData = (segmentId: string, data: ArrayBuffer): void => {\n        this.sendCommand({\n            c: MediaPeerCommands.SegmentData,\n            i: segmentId,\n            s: data.byteLength,\n        });\n\n        let bytesLeft = data.byteLength;\n        while (bytesLeft > 0) {\n            const bytesToSend =\n                bytesLeft >= this.settings.webRtcMaxMessageSize ? this.settings.webRtcMaxMessageSize : bytesLeft;\n            const buffer = Buffer.from(data, data.byteLength - bytesLeft, bytesToSend);\n\n            this.peer.write(buffer);\n            bytesLeft -= bytesToSend;\n        }\n\n        this.emit(\"bytes-uploaded\", this, segmentId, data.byteLength);\n    };\n\n    public sendSegmentAbsent = (segmentId: string): void => {\n        this.sendCommand({ c: MediaPeerCommands.SegmentAbsent, i: segmentId });\n    };\n\n    public requestSegment = (segmentId: string): void => {\n        if (this.downloadingSegmentId) {\n            throw new Error(\"A segment is already downloading: \" + this.downloadingSegmentId);\n        }\n\n        this.sendCommand({ c: MediaPeerCommands.SegmentRequest, i: segmentId });\n        this.downloadingSegmentId = segmentId;\n        this.runResponseTimeoutTimer();\n    };\n\n    public cancelSegmentRequest = (): ArrayBuffer[] | undefined => {\n        let downloadingSegment: ArrayBuffer[] | undefined;\n\n        if (this.downloadingSegmentId) {\n            const segmentId = this.downloadingSegmentId;\n            downloadingSegment = this.downloadingSegment ? this.downloadingSegment.pieces : undefined;\n            this.terminateSegmentRequest();\n            this.sendCommand({ c: MediaPeerCommands.CancelSegmentRequest, i: segmentId });\n        }\n\n        return downloadingSegment;\n    };\n\n    private runResponseTimeoutTimer = (): void => {\n        this.timer = setTimeout(() => {\n            this.timer = null;\n            if (!this.downloadingSegmentId) {\n                return;\n            }\n            const segmentId = this.downloadingSegmentId;\n            this.cancelSegmentRequest();\n            this.emit(\"segment-timeout\", this, segmentId); // TODO: send peer not responding event\n        }, this.settings.p2pSegmentDownloadTimeout);\n    };\n\n    private cancelResponseTimeoutTimer = (): void => {\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n    };\n\n    private terminateSegmentRequest = () => {\n        this.downloadingSegmentId = null;\n        this.downloadingSegment = null;\n        this.cancelResponseTimeoutTimer();\n    };\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport Debug from \"debug\";\nimport Client from \"bittorrent-tracker/client\";\nimport { Buffer } from \"buffer\";\nimport sha1 from \"sha.js/sha1\";\n\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\nimport { Segment } from \"./loader-interface\";\nimport { MediaPeer, MediaPeerSegmentStatus } from \"./media-peer\";\nimport { SegmentsStorage, SegmentValidatorCallback } from \"./hybrid-loader\";\n\nconst PEER_PROTOCOL_VERSION = 2;\nconst PEER_ID_VERSION_STRING = '0.6.2'.replace(/\\d*./g, (v) => `0${parseInt(v, 10) % 100}`.slice(-2)).slice(0, 4);\nconst PEER_ID_VERSION_PREFIX = `-WW${PEER_ID_VERSION_STRING}-`; // Using WebTorrent client ID in order to not be banned by websocket trackers\n\nclass PeerSegmentRequest {\n    constructor(readonly peerId: string, readonly segment: Segment) {}\n}\n\nfunction generatePeerId(): ArrayBuffer {\n    const PEER_ID_SYMBOLS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const PEER_ID_LENGTH = 20;\n\n    let peerId = PEER_ID_VERSION_PREFIX;\n\n    for (let i = 0; i < PEER_ID_LENGTH - PEER_ID_VERSION_PREFIX.length; i++) {\n        peerId += PEER_ID_SYMBOLS.charAt(Math.floor(Math.random() * PEER_ID_SYMBOLS.length));\n    }\n\n    return new TextEncoder().encode(peerId).buffer;\n}\n\nexport class P2PMediaManager extends STEEmitter<\n    | \"peer-connected\"\n    | \"peer-closed\"\n    | \"peer-data-updated\"\n    | \"segment-start-load\"\n    | \"segment-loaded\"\n    | \"segment-error\"\n    | \"segment-size\"\n    | \"bytes-downloaded\"\n    | \"bytes-uploaded\"\n    | \"tracker-update\"\n> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private trackerClient: any = null;\n    private peers = new Map<string, MediaPeer>();\n    private peerCandidates = new Map<string, MediaPeer[]>();\n    private peerSegmentRequests = new Map<string, PeerSegmentRequest>();\n    private streamSwarmId: string | null = null;\n    private readonly peerId: ArrayBuffer;\n    private debug = Debug(\"p2pml:p2p-media-manager\");\n    private pendingTrackerClient: {\n        isDestroyed: boolean;\n    } | null = null;\n    private masterSwarmId?: string;\n\n    public constructor(\n        private segmentsStorage: SegmentsStorage,\n        private settings: {\n            useP2P: boolean;\n            trackerAnnounce: string[];\n            p2pSegmentDownloadTimeout: number;\n            segmentValidator?: SegmentValidatorCallback;\n            webRtcMaxMessageSize: number;\n            rtcConfig?: RTCConfiguration;\n            peerRequestsPerAnnounce: number;\n        }\n    ) {\n        super();\n\n        this.peerId = settings.useP2P ? generatePeerId() : new ArrayBuffer(0);\n\n        if (this.debug.enabled) {\n            this.debug(\"peer ID\", this.getPeerId(), new TextDecoder().decode(this.peerId));\n        }\n    }\n\n    public getPeers = (): Map<string, MediaPeer> => {\n        return this.peers;\n    };\n\n    public getPeerId = (): string => {\n        return Buffer.from(this.peerId).toString(\"hex\");\n    };\n\n    public setStreamSwarmId = (streamSwarmId: string, masterSwarmId: string): void => {\n        if (this.streamSwarmId === streamSwarmId) {\n            return;\n        }\n\n        this.destroy(true);\n\n        this.streamSwarmId = streamSwarmId;\n        this.masterSwarmId = masterSwarmId;\n        this.debug(\"stream swarm ID\", this.streamSwarmId);\n\n        this.pendingTrackerClient = {\n            isDestroyed: false,\n        };\n\n        const pendingTrackerClient = this.pendingTrackerClient;\n\n        // TODO: native browser 'crypto.subtle' implementation doesn't work in Chrome in insecure pages\n        // TODO: Edge doesn't support SHA-1. Change to SHA-256 once Edge support is required.\n        // const infoHash = await crypto.subtle.digest(\"SHA-1\", new TextEncoder().encode(PEER_PROTOCOL_VERSION + this.streamSwarmId));\n\n        const infoHash = new sha1().update(`${PEER_PROTOCOL_VERSION}${this.streamSwarmId}`).digest();\n\n        // destroy may be called while waiting for the hash to be calculated\n        if (!pendingTrackerClient.isDestroyed) {\n            this.pendingTrackerClient = null;\n            this.createClient(infoHash);\n        } else if (this.trackerClient !== null) {\n            this.trackerClient.destroy();\n            this.trackerClient = null;\n        }\n    };\n\n    private createClient = (infoHash: ArrayBuffer): void => {\n        if (!this.settings.useP2P) {\n            return;\n        }\n\n        const clientOptions = {\n            infoHash: Buffer.from(infoHash, 0, 20),\n            peerId: Buffer.from(this.peerId, 0, 20),\n            announce: this.settings.trackerAnnounce,\n            rtcConfig: this.settings.rtcConfig,\n            port: 6881, // a dummy value allows running in Node.js environment\n            getAnnounceOpts: () => {\n                return { numwant: this.settings.peerRequestsPerAnnounce };\n            },\n        };\n\n        let oldTrackerClient = this.trackerClient;\n\n        this.trackerClient = new Client(clientOptions);\n        this.trackerClient.on(\"error\", this.onTrackerError);\n        this.trackerClient.on(\"warning\", this.onTrackerWarning);\n        this.trackerClient.on(\"update\", this.onTrackerUpdate);\n        this.trackerClient.on(\"peer\", this.onTrackerPeer);\n\n        this.trackerClient.start();\n\n        if (oldTrackerClient !== null) {\n            oldTrackerClient.destroy();\n            oldTrackerClient = null;\n        }\n    };\n\n    private onTrackerError = (error: unknown) => {\n        this.debug(\"tracker error\", error);\n    };\n\n    private onTrackerWarning = (warning: unknown) => {\n        this.debug(\"tracker warning\", warning);\n    };\n\n    private onTrackerUpdate = (data: unknown): void => {\n        this.debug(\"tracker update\", data);\n        this.emit(\"tracker-update\", data);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private onTrackerPeer = (trackerPeer: any): void => {\n        this.debug(\"tracker peer\", trackerPeer.id, trackerPeer);\n\n        if (this.peers.has(trackerPeer.id)) {\n            this.debug(\"tracker peer already connected\", trackerPeer.id, trackerPeer);\n            trackerPeer.destroy();\n            return;\n        }\n\n        const peer = new MediaPeer(trackerPeer, this.settings);\n\n        peer.on(\"connect\", this.onPeerConnect);\n        peer.on(\"close\", this.onPeerClose);\n        peer.on(\"data-updated\", this.onPeerDataUpdated);\n        peer.on(\"segment-request\", this.onSegmentRequest);\n        peer.on(\"segment-loaded\", this.onSegmentLoaded);\n        peer.on(\"segment-absent\", this.onSegmentAbsent);\n        peer.on(\"segment-error\", this.onSegmentError);\n        peer.on(\"segment-size\", this.onSegmentSize);\n        peer.on(\"segment-start-load\", this.onSegmentStartLoad);\n        peer.on(\"segment-timeout\", this.onSegmentTimeout);\n        peer.on(\"bytes-downloaded\", this.onPieceBytesDownloaded);\n        peer.on(\"bytes-uploaded\", this.onPieceBytesUploaded);\n\n        let peerCandidatesById = this.peerCandidates.get(peer.id);\n\n        if (!peerCandidatesById) {\n            peerCandidatesById = [];\n            this.peerCandidates.set(peer.id, peerCandidatesById);\n        }\n\n        peerCandidatesById.push(peer);\n    };\n\n    public download = (segment: Segment): boolean => {\n        if (this.isDownloading(segment)) {\n            return false;\n        }\n\n        const candidates: MediaPeer[] = [];\n\n        for (const peer of this.peers.values()) {\n            if (\n                peer.getDownloadingSegmentId() === null &&\n                peer.getSegmentsMap().get(segment.id) === MediaPeerSegmentStatus.Loaded\n            ) {\n                candidates.push(peer);\n            }\n        }\n\n        if (candidates.length === 0) {\n            return false;\n        }\n\n        const peer = candidates[Math.floor(Math.random() * candidates.length)];\n        peer.requestSegment(segment.id);\n        this.peerSegmentRequests.set(segment.id, new PeerSegmentRequest(peer.id, segment));\n        return true;\n    };\n\n    public abort = (segment: Segment): ArrayBuffer[] | undefined => {\n        let downloadingSegment: ArrayBuffer[] | undefined;\n        const peerSegmentRequest = this.peerSegmentRequests.get(segment.id);\n        if (peerSegmentRequest) {\n            const peer = this.peers.get(peerSegmentRequest.peerId);\n            if (peer) {\n                downloadingSegment = peer.cancelSegmentRequest();\n            }\n            this.peerSegmentRequests.delete(segment.id);\n        }\n        return downloadingSegment;\n    };\n\n    public isDownloading = (segment: Segment): boolean => {\n        return this.peerSegmentRequests.has(segment.id);\n    };\n\n    public getActiveDownloadsCount = (): number => {\n        return this.peerSegmentRequests.size;\n    };\n\n    public destroy = (swarmChange = false): void => {\n        this.streamSwarmId = null;\n\n        if (this.trackerClient) {\n            this.trackerClient.stop();\n            if (swarmChange) {\n                // Don't destroy trackerClient to reuse its WebSocket connection to the tracker server\n                this.trackerClient.removeAllListeners(\"error\");\n                this.trackerClient.removeAllListeners(\"warning\");\n                this.trackerClient.removeAllListeners(\"update\");\n                this.trackerClient.removeAllListeners(\"peer\");\n            } else {\n                this.trackerClient.destroy();\n                this.trackerClient = null;\n            }\n        }\n\n        if (this.pendingTrackerClient) {\n            this.pendingTrackerClient.isDestroyed = true;\n            this.pendingTrackerClient = null;\n        }\n\n        this.peers.forEach((peer) => peer.destroy());\n        this.peers.clear();\n\n        this.peerSegmentRequests.clear();\n\n        for (const peerCandidateById of this.peerCandidates.values()) {\n            for (const peerCandidate of peerCandidateById) {\n                peerCandidate.destroy();\n            }\n        }\n        this.peerCandidates.clear();\n    };\n\n    public sendSegmentsMapToAll = (segmentsMap: { [key: string]: [string, number[]] }): void => {\n        this.peers.forEach((peer) => peer.sendSegmentsMap(segmentsMap));\n    };\n\n    public sendSegmentsMap = (peerId: string, segmentsMap: { [key: string]: [string, number[]] }): void => {\n        const peer = this.peers.get(peerId);\n        if (peer) {\n            peer.sendSegmentsMap(segmentsMap);\n        }\n    };\n\n    public getOverallSegmentsMap = (): Map<string, MediaPeerSegmentStatus> => {\n        const overallSegmentsMap = new Map<string, MediaPeerSegmentStatus>();\n\n        for (const peer of this.peers.values()) {\n            for (const [segmentId, segmentStatus] of peer.getSegmentsMap()) {\n                if (segmentStatus === MediaPeerSegmentStatus.Loaded) {\n                    overallSegmentsMap.set(segmentId, MediaPeerSegmentStatus.Loaded);\n                } else if (!overallSegmentsMap.get(segmentId)) {\n                    overallSegmentsMap.set(segmentId, MediaPeerSegmentStatus.LoadingByHttp);\n                }\n            }\n        }\n\n        return overallSegmentsMap;\n    };\n\n    private onPieceBytesDownloaded = (peer: MediaPeer, segmentId: string, bytes: number) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n\n        if (peerSegmentRequest) {\n            this.emit(\"bytes-downloaded\", peerSegmentRequest.segment, bytes, peer.id);\n        }\n    };\n\n    private onPieceBytesUploaded = (peer: MediaPeer, segmentId: string, bytes: number) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n\n        \n        this.emit(\"bytes-uploaded\", peerSegmentRequest ? peerSegmentRequest.segment : null, bytes, peer.id);\n      \n    };\n\n    private onPeerConnect = (peer: MediaPeer) => {\n        const connectedPeer = this.peers.get(peer.id);\n\n        if (connectedPeer) {\n            this.debug(\"tracker peer already connected (in peer connect)\", peer.id, peer);\n            peer.destroy();\n            return;\n        }\n\n        // First peer with the ID connected\n        this.peers.set(peer.id, peer);\n\n        // Destroy all other peer candidates\n        const peerCandidatesById = this.peerCandidates.get(peer.id);\n        if (peerCandidatesById) {\n            for (const peerCandidate of peerCandidatesById) {\n                if (peerCandidate !== peer) {\n                    peerCandidate.destroy();\n                }\n            }\n\n            this.peerCandidates.delete(peer.id);\n        }\n\n        this.emit(\"peer-connected\", { id: peer.id, remoteAddress: peer.remoteAddress });\n    };\n\n    private onPeerClose = (peer: MediaPeer) => {\n        if (this.peers.get(peer.id) !== peer) {\n            // Try to delete the peer candidate\n\n            const peerCandidatesById = this.peerCandidates.get(peer.id);\n            if (!peerCandidatesById) {\n                return;\n            }\n\n            const index = peerCandidatesById.indexOf(peer);\n            if (index !== -1) {\n                peerCandidatesById.splice(index, 1);\n            }\n\n            if (peerCandidatesById.length === 0) {\n                this.peerCandidates.delete(peer.id);\n            }\n\n            return;\n        }\n\n        for (const [key, value] of this.peerSegmentRequests) {\n            if (value.peerId === peer.id) {\n                this.peerSegmentRequests.delete(key);\n            }\n        }\n\n        this.peers.delete(peer.id);\n        this.emit(\"peer-data-updated\");\n        this.emit(\"peer-closed\", peer.id);\n    };\n\n    private onPeerDataUpdated = () => {\n        this.emit(\"peer-data-updated\");\n    };\n\n    private onSegmentRequest = async (peer: MediaPeer, segmentId: string) => {\n        if (this.masterSwarmId === undefined) {\n            return;\n        }\n\n        const segment = await this.segmentsStorage.getSegment(segmentId, this.masterSwarmId);\n        if (segment && segment.data) {\n            peer.sendSegmentData(segmentId, segment.data);\n        } else {\n            peer.sendSegmentAbsent(segmentId);\n        }\n    };\n\n    private onSegmentLoaded = async (peer: MediaPeer, segmentId: string, data: ArrayBuffer) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n        if (!peerSegmentRequest) {\n            return;\n        }\n\n        const segment = peerSegmentRequest.segment;\n\n        if (this.settings.segmentValidator) {\n            try {\n                await this.settings.segmentValidator({ ...segment, data: data }, \"p2p\", peer.id);\n            } catch (error) {\n                this.debug(\"segment validator failed\", error);\n                this.peerSegmentRequests.delete(segmentId);\n                this.emit(\"segment-error\", segment, error, peer.id);\n                this.onPeerClose(peer);\n                return;\n            }\n        }\n\n        this.peerSegmentRequests.delete(segmentId);\n        this.emit(\"segment-loaded\", segment, data, peer.id);\n    };\n\n    private onSegmentAbsent = (peer: MediaPeer, segmentId: string) => {\n        this.peerSegmentRequests.delete(segmentId);\n        this.emit(\"peer-data-updated\");\n    };\n\n    private onSegmentError = (peer: MediaPeer, segmentId: string, description: string) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n        if (peerSegmentRequest) {\n            this.peerSegmentRequests.delete(segmentId);\n            this.emit(\"segment-error\", peerSegmentRequest.segment, description, peer.id);\n        }\n    };\n\n    private onSegmentSize = (segmentId: string, size: number) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n\n        if (peerSegmentRequest) {\n            this.emit(\"segment-size\", peerSegmentRequest.segment, size);\n        }\n    };\n\n    private onSegmentStartLoad = (segmentId: string, size: number) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n\n        if (peerSegmentRequest) {\n            this.emit(\"segment-start-load\", peerSegmentRequest.segment, size);\n        }\n    };\n\n    private onSegmentTimeout = (peer: MediaPeer, segmentId: string) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n        if (peerSegmentRequest) {\n            this.peerSegmentRequests.delete(segmentId);\n            peer.destroy();\n            if (this.peers.delete(peerSegmentRequest.peerId)) {\n                this.emit(\"peer-data-updated\");\n            }\n        }\n    };\n}\n","/**\n * Copyright 2019 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Segment } from \"./loader-interface\";\nimport { SegmentsStorage } from \"./hybrid-loader\";\n\nexport class SegmentsMemoryStorage implements SegmentsStorage {\n    private cache = new Map<string, { segment: Segment; lastAccessed: number }>();\n\n    constructor(\n        private settings: {\n            cachedSegmentExpiration: number;\n            cachedSegmentsCount: number;\n        }\n    ) {}\n\n    public storeSegment = async (segment: Segment): Promise<void> => {\n        this.cache.set(segment.id, { segment, lastAccessed: performance.now() });\n    };\n\n    public getSegmentsMap = async (): Promise<Map<string, { segment: Segment }>> => {\n        return this.cache;\n    };\n\n    public getSegment = async (id: string): Promise<Segment | undefined> => {\n        const cacheItem = this.cache.get(id);\n\n        if (cacheItem === undefined) {\n            return undefined;\n        }\n\n        cacheItem.lastAccessed = performance.now();\n        return cacheItem.segment;\n    };\n\n    public hasSegment = async (id: string): Promise<boolean> => {\n        return this.cache.has(id);\n    };\n\n    public clean = async (masterSwarmId: string, lockedSegmentsFilter?: (id: string) => boolean): Promise<boolean> => {\n        const segmentsToDelete: string[] = [];\n        const remainingSegments: { segment: Segment; lastAccessed: number }[] = [];\n\n        // Delete old segments\n        const now = performance.now();\n\n        for (const cachedSegment of this.cache.values()) {\n            if (now - cachedSegment.lastAccessed > this.settings.cachedSegmentExpiration) {\n                segmentsToDelete.push(cachedSegment.segment.id);\n            } else {\n                remainingSegments.push(cachedSegment);\n            }\n        }\n\n        // Delete segments over cached count\n        let countOverhead = remainingSegments.length - this.settings.cachedSegmentsCount;\n        if (countOverhead > 0) {\n            remainingSegments.sort((a, b) => a.lastAccessed - b.lastAccessed);\n\n            for (const cachedSegment of remainingSegments) {\n                if (lockedSegmentsFilter === undefined || !lockedSegmentsFilter(cachedSegment.segment.id)) {\n                    segmentsToDelete.push(cachedSegment.segment.id);\n                    countOverhead--;\n                    if (countOverhead === 0) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        segmentsToDelete.forEach((id) => this.cache.delete(id));\n        return segmentsToDelete.length > 0;\n    };\n\n    public destroy = async (): Promise<void> => {\n        this.cache.clear();\n    };\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { EventEmitter } from \"events\";\n\nexport class STEEmitter<T extends string | symbol> extends EventEmitter {\n    public on = (event: T, listener: (...args: any[]) => void): this => super.on(event, listener);\n    public emit = (event: T, ...args: any[]): boolean => super.emit(event, ...args);\n}\n","import { LoaderContext } from \"hls.js\"\r\n\r\nexport type ByteRange = { length: number; offset: number } | undefined;\r\n\r\nexport function getByteRange(context: LoaderContext): { offset: number, length: number } | undefined {\r\n  return context.rangeEnd && context.rangeStart !== undefined\r\n      ? { offset: context.rangeStart, length: context.rangeEnd - context.rangeStart }\r\n      : undefined;\r\n}\r\n\r\nexport function compareByteRanges(b1: ByteRange, b2: ByteRange): boolean {\r\n  return b1 === undefined ? b2 === undefined : b2 !== undefined && b1.length === b2.length && b1.offset === b2.offset;\r\n}\r\n\r\nexport function byteRangeToString(byteRange: ByteRange): string | undefined {\r\n  if (byteRange === undefined) {\r\n      return undefined;\r\n  }\r\n\r\n  const end = byteRange.offset + byteRange.length - 1;\r\n\r\n  return `bytes=${byteRange.offset}-${end}`;\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { EventEmitter } from \"events\";\r\nimport { Events, LoaderInterface, HybridLoader, HybridLoaderSettings } from \"../../p2p-media-loader-core/lib\";\r\nimport { SegmentManager, SegmentManagerSettings } from \"./segment-manager\";\r\nimport { HlsJsLoader } from \"./hlsjs-loader\";\r\nimport type { LoaderCallbacks, LoaderConfiguration, LoaderContext, LoaderStats } from \"hls.js\";\r\nimport { ByteRange } from \"./byte-range\"\r\n\r\nexport interface HlsJsEngineSettings {\r\n    loader: Partial<HybridLoaderSettings & { localTransport?: typeof fetch }>;\r\n    segments: Partial<SegmentManagerSettings>;\r\n}\r\n\r\nexport class Engine extends EventEmitter {\r\n    public static isSupported(): boolean {\r\n        return HybridLoader.isSupported();\r\n    }\r\n\r\n    private readonly loader: LoaderInterface;\r\n    private readonly segmentManager: SegmentManager;\r\n\r\n    public constructor(settings: Partial<HlsJsEngineSettings> = {}) {\r\n        super();\r\n\r\n        this.loader = new HybridLoader(settings.loader);\r\n        this.segmentManager = new SegmentManager(this.loader, settings);\r\n\r\n        Object.keys(Events)\r\n            .map((eventKey) => Events[eventKey as keyof typeof Events])\r\n            .forEach((event) => this.loader.on(event, (...args: any[]) => this.emit(event, ...args)));\r\n    }\r\n\r\n    public createLoaderClass(): new () => unknown {\r\n        const engine = this; // eslint-disable-line @typescript-eslint/no-this-alias\r\n        return class {\r\n            private impl: HlsJsLoader;\r\n            private context?: LoaderContext;\r\n            private callbacks?: LoaderCallbacks<LoaderContext>;\r\n            public stats: LoaderStats;\r\n\r\n            constructor() {\r\n                this.impl = new HlsJsLoader(engine.segmentManager);\r\n                this.stats = this.impl.stats;\r\n            }\r\n\r\n            load = async (\r\n                context: LoaderContext,\r\n                config: LoaderConfiguration,\r\n                callbacks: LoaderCallbacks<LoaderContext>\r\n            ) => {\r\n                this.context = context;\r\n                this.callbacks = callbacks;\r\n                this.impl.load(context, config, callbacks);\r\n\r\n            };\r\n\r\n            abort = () => {\r\n                if (this.context) {\r\n                    this.impl.abort(this.context, this.callbacks);\r\n                }\r\n            };\r\n\r\n            destroy = () => {\r\n                if (this.context) {\r\n                    this.impl.abort(this.context);\r\n                }\r\n            };\r\n\r\n            getResponseHeader = () => undefined;\r\n\r\n            static getEngine = () => {\r\n                return engine;\r\n            };\r\n        };\r\n    }\r\n\r\n    public async destroy(): Promise<void> {\r\n        await this.segmentManager.destroy();\r\n    }\r\n\r\n    public getSettings(): {\r\n        segments: SegmentManagerSettings;\r\n        loader: unknown;\r\n    } {\r\n        return {\r\n            segments: this.segmentManager.getSettings(),\r\n            loader: this.loader.getSettings(),\r\n        };\r\n    }\r\n\r\n    public getDetails(): unknown {\r\n        return {\r\n            loader: this.loader.getDetails(),\r\n        };\r\n    }\r\n\r\n    public setPlayingSegment(url: string, byteRange: ByteRange, start: number, duration: number): void {\r\n        this.segmentManager.setPlayingSegment(url, byteRange, start, duration);\r\n    }\r\n\r\n    public setPlayingSegmentByCurrentTime(playheadPosition: number): void {\r\n        this.segmentManager.setPlayingSegmentByCurrentTime(playheadPosition);\r\n    }\r\n\r\n}\r\n\r\nexport interface Asset {\r\n    masterSwarmId: string;\r\n    masterManifestUri: string;\r\n    requestUri: string;\r\n    requestRange?: string;\r\n    responseUri: string;\r\n    data: ArrayBuffer | string;\r\n}\r\n\r\nexport interface AssetsStorage {\r\n    storeAsset(asset: Asset): Promise<void>;\r\n    getAsset(requestUri: string, requestRange: string | undefined, masterSwarmId: string): Promise<Asset | undefined>;\r\n    destroy(): Promise<void>;\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { SegmentManager } from \"./segment-manager\";\r\nimport type { LoaderCallbacks, LoaderConfiguration, LoaderContext, LoaderStats } from \"hls.js\";\r\nimport { Events, Segment } from \"../../p2p-media-loader-core/lib\";\r\nimport { byteRangeToString, getByteRange } from \"./byte-range\"\r\n\r\nexport class HlsJsLoader {\r\n    private isLoaded = false;\r\n    private segmentManager: SegmentManager;\r\n    public stats: LoaderStats = {\r\n        loaded: 0,\r\n        total: 0,\r\n        aborted: false,\r\n        retry: 0,\r\n        chunkCount: 0,\r\n        bwEstimate: 0,\r\n        loading: {\r\n            start: 0,\r\n            end: 0,\r\n            first: 0,\r\n        },\r\n        parsing: {\r\n            start: 0,\r\n            end: 0,\r\n        },\r\n        buffering: {\r\n            start: 0,\r\n            end: 0,\r\n            first: 0,\r\n        },\r\n    };\r\n\r\n    public constructor(segmentManager: SegmentManager) {\r\n        this.segmentManager = segmentManager;\r\n    }\r\n\r\n    public async load(\r\n        context: LoaderContext,\r\n        _config: LoaderConfiguration,\r\n        callbacks: LoaderCallbacks<LoaderContext>\r\n    ): Promise<void> {\r\n        HlsJsLoader.updateStatsToStartLoading(this.stats)\r\n\r\n        if (((context as unknown) as { type: unknown }).type) {\r\n            try {\r\n                const result = await this.segmentManager.loadPlaylist(context.url);\r\n                this.isLoaded = true;\r\n                this.successPlaylist(result, context, callbacks);\r\n            } catch (e : any) {\r\n                this.error(e, context, callbacks);\r\n            }\r\n        } else if (((context as unknown) as { frag: unknown }).frag) {\r\n            const { loader } = this.segmentManager;\r\n            const byteRange = getByteRange(context)\r\n\r\n            const isSegment = (segment: Segment) => {\r\n                return segment.url === context.url && segment.range === byteRangeToString(byteRange)\r\n            }\r\n\r\n            // We may be downloading the segment by P2P, so we don't care about the stats sent to HLS ABR\r\n            let updateStart: any = setInterval(() => {\r\n                HlsJsLoader.updateStatsToStartLoading(this.stats)\r\n            }, 200)\r\n\r\n            const onUpdateSegmentSize = (segment: Segment, size: number) => {\r\n                if (!isSegment(segment)) return\r\n\r\n                this.stats.total = size\r\n            };\r\n            loader.on(Events.SegmentSize, onUpdateSegmentSize)\r\n\r\n            const onUpdateLoaded = (_type: unknown, segment: Segment, bytes: number) => {\r\n                if (!isSegment(segment)) return\r\n\r\n                this.stats.loaded += bytes\r\n            };\r\n\r\n            const onSegmentStartLoad = (method: \"http\" | \"p2p\", segment: Segment) => {\r\n                if (!updateStart || method !== \"http\" || !isSegment(segment)) return\r\n\r\n                clearInterval(updateStart)\r\n                updateStart = undefined\r\n\r\n                HlsJsLoader.updateStatsToStartLoading(this.stats)\r\n\r\n                loader.on(Events.PieceBytesDownloaded, onUpdateLoaded)\r\n            };\r\n\r\n            loader.on(Events.SegmentStartLoad, onSegmentStartLoad)\r\n\r\n\r\n            try {\r\n                const result = await this.segmentManager.loadSegment(context.url, byteRange);\r\n                const { content } = result;\r\n                if (content) {\r\n                    this.isLoaded = true;\r\n                    setTimeout(() => this.successSegment(content, context, callbacks), 0);\r\n                }\r\n\r\n            } catch (e : any) {\r\n                setTimeout(() => this.error(e, context, callbacks), 0);\r\n            } finally {\r\n\r\n                clearInterval(updateStart)\r\n                loader.off(Events.SegmentStartLoad, onSegmentStartLoad)\r\n                loader.off(Events.SegmentSize, onUpdateSegmentSize)\r\n                loader.off(Events.PieceBytesDownloaded, onUpdateLoaded)\r\n            }\r\n\r\n\r\n\r\n\r\n        } else {\r\n            console.warn(\"Unknown load request\", context);\r\n        }\r\n    }\r\n\r\n    public abort(context: LoaderContext, callbacks?: LoaderCallbacks<LoaderContext>): void {\r\n        if (this.isLoaded) return;\r\n\r\n        this.segmentManager.abortSegment(context.url, getByteRange(context));\r\n        this.stats.aborted = true;\r\n\r\n        const onAbort = callbacks?.onAbort;\r\n        if (onAbort) {\r\n            onAbort(this.stats, context, undefined);\r\n        }\r\n    }\r\n\r\n    private successPlaylist(\r\n        xhr: { response: string; responseURL: string },\r\n        context: LoaderContext,\r\n        callbacks: LoaderCallbacks<LoaderContext>\r\n    ): void {\r\n        const now = performance.now();\r\n\r\n        this.stats.loading.end = now;\r\n        this.stats.loaded = xhr.response.length;\r\n        this.stats.total = xhr.response.length;\r\n\r\n        callbacks.onSuccess(\r\n            {\r\n                url: xhr.responseURL,\r\n                data: xhr.response,\r\n            },\r\n            this.stats,\r\n            context,\r\n            undefined\r\n        );\r\n    }\r\n\r\n    private successSegment(\r\n        content: ArrayBuffer,\r\n        context: LoaderContext,\r\n        callbacks: LoaderCallbacks<LoaderContext>\r\n    ): void {\r\n        const now = performance.now();\r\n\r\n        this.stats.loading.end = now;\r\n        this.stats.loaded = content.byteLength;\r\n        this.stats.total = content.byteLength;\r\n\r\n        if (callbacks.onProgress) {\r\n            callbacks.onProgress(this.stats, context, content, undefined);\r\n        }\r\n\r\n        callbacks.onSuccess(\r\n            {\r\n                url: context.url,\r\n                data: content,\r\n            },\r\n            this.stats,\r\n            context,\r\n            undefined\r\n        );\r\n    }\r\n\r\n    private error(\r\n        error: { code: number; text: string },\r\n        context: LoaderContext,\r\n        callbacks: LoaderCallbacks<LoaderContext>\r\n    ): void {\r\n        callbacks.onError(error, context, undefined);\r\n    }\r\n\r\n    private static updateStatsToStartLoading (stats: LoaderStats) {\r\n        const start = performance.now();\r\n        stats.loading.start = start;\r\n        stats.loading.first = start;\r\n    }\r\n}\r\n","/**\r\n * @license Apache-2.0\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* eslint-disable */\r\n\r\nexport const version = \"0.6.2\";\r\nexport * from \"./engine\";\r\nexport * from \"./segment-manager\";\r\n\r\nimport { Engine } from \"./engine\";\r\n\r\ndeclare const videojs: any;\r\n\r\ndeclare global {\r\n    interface Window {\r\n        p2pml: Record<string, unknown>;\r\n    }\r\n}\r\n\r\nexport function initHlsJsPlayer(player: any): void {\r\n    if (player && player.config && player.config.loader && typeof player.config.loader.getEngine === \"function\") {\r\n        initHlsJsEvents(player, player.config.loader.getEngine());\r\n    }\r\n}\r\n\r\nexport function initClapprPlayer(player: any): void {\r\n    player.on(\"play\", () => {\r\n        const playback = player.core.getCurrentPlayback();\r\n        if (playback._hls && !playback._hls._p2pm_linitialized) {\r\n            playback._hls._p2pm_linitialized = true;\r\n            initHlsJsPlayer(player.core.getCurrentPlayback()._hls);\r\n        }\r\n    });\r\n}\r\n\r\nexport function initFlowplayerHlsJsPlayer(player: any): void {\r\n    player.on(\"ready\", () => initHlsJsPlayer(player.engine.hlsjs ?? player.engine.hls));\r\n}\r\n\r\nexport function initVideoJsContribHlsJsPlayer(player: any): void {\r\n    player.ready(() => {\r\n        const options = player.tech_.options_;\r\n        if (\r\n            options &&\r\n            options.hlsjsConfig &&\r\n            options.hlsjsConfig.loader &&\r\n            typeof options.hlsjsConfig.loader.getEngine === \"function\"\r\n        ) {\r\n            initHlsJsEvents(player.tech_, options.hlsjsConfig.loader.getEngine());\r\n        }\r\n    });\r\n}\r\n\r\nexport function initVideoJsHlsJsPlugin(): void {\r\n    if (videojs == undefined || videojs.Html5Hlsjs == undefined) {\r\n        return;\r\n    }\r\n\r\n    videojs.Html5Hlsjs.addHook(\"beforeinitialize\", (videojsPlayer: any, hlsjs: any) => {\r\n        if (hlsjs.config && hlsjs.config.loader && typeof hlsjs.config.loader.getEngine === \"function\") {\r\n            initHlsJsEvents(hlsjs, hlsjs.config.loader.getEngine());\r\n        }\r\n    });\r\n}\r\n\r\nexport function initMediaElementJsPlayer(mediaElement: any): void {\r\n\r\n\r\n    mediaElement.addEventListener(\"hlsFragChanged\", (event: any) => {\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            const engine: Engine = hls.config.loader.getEngine();\r\n\r\n            if (event.data && event.data.length > 1) {\r\n                const frag = event.data[1].frag;\r\n                const byteRange =\r\n                    frag.byteRange.length !== 2\r\n                        ? undefined\r\n                        : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\r\n                engine.setPlayingSegment(frag.url, byteRange, frag.start, frag.duration);\r\n            }\r\n        }\r\n    });\r\n    mediaElement.addEventListener(\"hlsDestroying\", async () => {\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            const engine: Engine = hls.config.loader.getEngine();\r\n            await engine.destroy();\r\n        }\r\n    });\r\n    mediaElement.addEventListener(\"hlsError\", (event: any) => {\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            if (event.data !== undefined && event.data.details === \"bufferStalledError\") {\r\n                const engine: Engine = hls.config.loader.getEngine();\r\n                engine.setPlayingSegmentByCurrentTime(hls.media.currentTime);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function initJwPlayer(player: any, hlsjsConfig: any): void {\r\n    const iid = setInterval(() => {\r\n        if (player.hls && player.hls.config) {\r\n            clearInterval(iid);\r\n            Object.assign(player.hls.config, hlsjsConfig);\r\n            initHlsJsPlayer(player.hls);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nfunction initHlsJsEvents(player: any, engine: Engine): void {\r\n    player.on(\"hlsFragChanged\", (_event: string, data: any) => {\r\n        const frag = data.frag;\r\n        const byteRange =\r\n            frag.byteRange.length !== 2\r\n                ? undefined\r\n                : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\r\n        engine.setPlayingSegment(frag.url, byteRange, frag.start, frag.duration);\r\n    });\r\n    player.on(\"hlsDestroying\", async () => {\r\n        await engine.destroy();\r\n    });\r\n    player.on(\"hlsError\", (_event: string, errorData: { details: string }) => {\r\n        if (errorData.details === \"bufferStalledError\") {\r\n            const htmlMediaElement = (player.media === undefined\r\n                ? player.el_ // videojs-contrib-hlsjs\r\n                : player.media) as HTMLMediaElement | undefined; // all others\r\n            if (htmlMediaElement) {\r\n                engine.setPlayingSegmentByCurrentTime(htmlMediaElement.currentTime);\r\n            }\r\n        }\r\n    });\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Events, Segment, LoaderInterface } from \"../../p2p-media-loader-core/lib\";\r\nimport { Manifest, Parser } from \"m3u8-parser\";\r\nimport { ByteRange, byteRangeToString, compareByteRanges } from \"./byte-range\"\r\nimport { AssetsStorage, HlsJsEngineSettings } from \"./engine\";\r\n\r\nconst defaultSettings: SegmentManagerSettings = {\r\n    forwardSegmentCount: 20,\r\n    swarmId: undefined,\r\n    assetsStorage: undefined,\r\n};\r\n\r\nexport class SegmentManager {\r\n    public readonly loader: LoaderInterface;\r\n    private masterPlaylist: Playlist | null = null;\r\n    private readonly variantPlaylists = new Map<string, Playlist>();\r\n    private segmentRequest: SegmentRequest | null = null;\r\n    private readonly fetch: typeof fetch = (...args) => fetch(...args);\r\n    private playQueue: {\r\n        segmentSequence: number;\r\n        segmentUrl: string;\r\n        segmentByteRange: ByteRange;\r\n        playPosition?: {\r\n            start: number;\r\n            duration: number;\r\n        };\r\n    }[] = [];\r\n    private readonly settings: SegmentManagerSettings;\r\n\r\n    public constructor(loader: LoaderInterface, settings: Partial<HlsJsEngineSettings> = {}) {\r\n        this.settings = { ...defaultSettings, ...settings.segments };\r\n\r\n        this.loader = loader;\r\n        this.loader.on(Events.SegmentLoaded, this.onSegmentLoaded);\r\n        this.loader.on(Events.SegmentError, this.onSegmentError);\r\n        this.loader.on(Events.SegmentAbort, this.onSegmentAbort);\r\n\r\n        if (settings.loader && settings.loader.localTransport) {\r\n            this.fetch = settings.loader.localTransport;\r\n        }\r\n    }\r\n\r\n    public getSettings(): SegmentManagerSettings {\r\n        return this.settings;\r\n    }\r\n\r\n    public processPlaylist(requestUrl: string, content: string, responseUrl: string): void {\r\n        const parser = new Parser();\r\n        parser.push(content);\r\n        parser.end();\r\n\r\n        const playlist = new Playlist(requestUrl, responseUrl, parser.manifest);\r\n\r\n        if (playlist.manifest.playlists) {\r\n            this.masterPlaylist = playlist;\r\n\r\n            for (const [key, variantPlaylist] of this.variantPlaylists) {\r\n                const { streamSwarmId, found, index } = this.getStreamSwarmId(variantPlaylist.requestUrl);\r\n                if (!found) {\r\n                    this.variantPlaylists.delete(key);\r\n                } else {\r\n                    variantPlaylist.streamSwarmId = streamSwarmId;\r\n                    variantPlaylist.streamId = \"V\" + index.toString();\r\n                }\r\n            }\r\n        } else {\r\n            const { streamSwarmId, found, index } = this.getStreamSwarmId(requestUrl);\r\n\r\n            if (found || this.masterPlaylist === null) {\r\n                // do not add audio and subtitles to variants\r\n                playlist.streamSwarmId = streamSwarmId;\r\n                playlist.streamId = this.masterPlaylist === null ? undefined : \"V\" + index.toString();\r\n                this.variantPlaylists.set(requestUrl, playlist);\r\n                this.updateSegments();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async loadPlaylist(url: string): Promise<{ response: string; responseURL: string }> {\r\n        const assetsStorage = this.settings.assetsStorage;\r\n        let res: { response: string; responseURL: string } | undefined;\r\n\r\n        if (assetsStorage !== undefined) {\r\n            let masterSwarmId: string | undefined;\r\n            masterSwarmId = this.getMasterSwarmId();\r\n            if (masterSwarmId === undefined) {\r\n                masterSwarmId = url.split(\"?\")[0];\r\n            }\r\n            const asset = await assetsStorage.getAsset(url, undefined, masterSwarmId);\r\n\r\n            if (asset !== undefined) {\r\n                res = {\r\n                    responseURL: asset.responseUri,\r\n                    response: asset.data as string,\r\n                };\r\n            } else {\r\n                const fetch = await this.loadContent(url);\r\n\r\n                res = {\r\n                    responseURL: fetch.url,\r\n                    response: await fetch.text(),\r\n                };\r\n\r\n                void assetsStorage.storeAsset({\r\n                    masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : url,\r\n                    masterSwarmId: masterSwarmId,\r\n                    requestUri: url,\r\n                    responseUri: res.responseURL,\r\n                    data: await res.response,\r\n                });\r\n            }\r\n        } else {\r\n            const fetch = await this.loadContent(url);\r\n\r\n            res = {\r\n                responseURL: fetch.url,\r\n                response: await fetch.text(),\r\n            };\r\n        }\r\n\r\n        this.processPlaylist(url, res.response, res.responseURL);\r\n        return res;\r\n    }\r\n\r\n    \r\n\r\n    public async loadSegment(\r\n        url: string,\r\n        byteRange: ByteRange\r\n    ): Promise<{ content: ArrayBuffer | undefined; downloadBandwidth?: number }> {\r\n        const segmentLocation = this.getSegmentLocation(url, byteRange);\r\n        const byteRangeString = byteRangeToString(byteRange);\r\n\r\n        if (!segmentLocation) {\r\n            let content: ArrayBuffer | undefined;\r\n\r\n            // Not a segment from variants; usually can be: init, audio or subtitles segment, encryption key etc.\r\n            const assetsStorage = this.settings.assetsStorage;\r\n            if (assetsStorage !== undefined) {\r\n                let masterManifestUri = this.masterPlaylist?.requestUrl;\r\n\r\n                let masterSwarmId: string | undefined;\r\n                masterSwarmId = this.getMasterSwarmId();\r\n\r\n                if (masterSwarmId === undefined && this.variantPlaylists.size === 1) {\r\n                    const result = this.variantPlaylists.values().next();\r\n                    if (!result.done) {\r\n                        // always true\r\n                        masterSwarmId = result.value.requestUrl.split(\"?\")[0];\r\n                    }\r\n                }\r\n\r\n                if (masterManifestUri === undefined && this.variantPlaylists.size === 1) {\r\n                    const result = this.variantPlaylists.values().next();\r\n                    if (!result.done) {\r\n                        // always true\r\n                        masterManifestUri = result.value.requestUrl;\r\n                    }\r\n                }\r\n\r\n                if (masterSwarmId !== undefined && masterManifestUri !== undefined) {\r\n                    const asset = await assetsStorage.getAsset(url, byteRangeString, masterSwarmId);\r\n                    if (asset !== undefined) {\r\n                        content = asset.data as ArrayBuffer;\r\n                    } else {\r\n                        const fetch = await this.loadContent(url, byteRangeString);\r\n                        content = await fetch.arrayBuffer();\r\n                        void assetsStorage.storeAsset({\r\n                            masterManifestUri: masterManifestUri,\r\n                            masterSwarmId: masterSwarmId,\r\n                            requestUri: url,\r\n                            requestRange: byteRangeString,\r\n                            responseUri: fetch.url,\r\n                            data: content,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (content === undefined) {\r\n                const fetch = await this.loadContent(url, byteRangeString);\r\n                content = await fetch.arrayBuffer();\r\n            }\r\n\r\n            return { content, downloadBandwidth: 0 };\r\n        }\r\n\r\n        const segmentSequence =\r\n            (segmentLocation.playlist.manifest.mediaSequence ? segmentLocation.playlist.manifest.mediaSequence : 0) +\r\n            segmentLocation.segmentIndex;\r\n\r\n        if (this.playQueue.length > 0) {\r\n            const previousSegment = this.playQueue[this.playQueue.length - 1];\r\n            if (previousSegment.segmentSequence !== segmentSequence - 1) {\r\n                // Reset play queue in case of segment loading out of sequence\r\n                this.playQueue = [];\r\n            }\r\n        }\r\n\r\n        if (this.segmentRequest) {\r\n            this.segmentRequest.onError(\"Cancel segment request: simultaneous segment requests are not supported\");\r\n        }\r\n\r\n        const promise = new Promise<{ content: ArrayBuffer | undefined; downloadBandwidth?: number }>(\r\n            (resolve, reject) => {\r\n\r\n                this.segmentRequest = new SegmentRequest(\r\n                    url,\r\n                    byteRange,\r\n                    segmentSequence,\r\n                    segmentLocation.playlist.requestUrl,\r\n                    (content: ArrayBuffer | undefined, downloadBandwidth?: number) =>\r\n                        resolve({ content, downloadBandwidth }),\r\n                    (error) => reject(error)\r\n                );\r\n                \r\n            }\r\n        );\r\n\r\n        this.playQueue.push({ segmentUrl: url, segmentByteRange: byteRange, segmentSequence: segmentSequence });\r\n        void this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, true);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public setPlayingSegment(url: string, byteRange: ByteRange, start: number, duration: number): void {\r\n        const urlIndex = this.playQueue.findIndex(\r\n            (segment) => segment.segmentUrl === url && compareByteRanges(segment.segmentByteRange, byteRange)\r\n        );\r\n\r\n        if (urlIndex >= 0) {\r\n            this.playQueue = this.playQueue.slice(urlIndex);\r\n            this.playQueue[0].playPosition = { start, duration };\r\n            this.updateSegments();\r\n        }\r\n    }\r\n\r\n    public setPlayingSegmentByCurrentTime(playheadPosition: number): void {\r\n        if (this.playQueue.length === 0 || !this.playQueue[0].playPosition) {\r\n            return;\r\n        }\r\n\r\n        const currentSegmentPosition = this.playQueue[0].playPosition;\r\n        const segmentEndTime = currentSegmentPosition.start + currentSegmentPosition.duration;\r\n\r\n        if (segmentEndTime - playheadPosition < 0.2) {\r\n            // means that current segment is (almost) finished playing\r\n            // remove it from queue\r\n\r\n            this.playQueue = this.playQueue.slice(1);\r\n            this.updateSegments();\r\n        }\r\n    }\r\n\r\n    public abortSegment(url: string, byteRange: ByteRange): void {\r\n        if (\r\n            this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === url &&\r\n            compareByteRanges(this.segmentRequest.segmentByteRange, byteRange)\r\n        ) {\r\n            this.segmentRequest.onSuccess(undefined, 0);\r\n            this.segmentRequest = null;\r\n        }\r\n    }\r\n\r\n    public async destroy(): Promise<void> {\r\n        if (this.segmentRequest) {\r\n            this.segmentRequest.onError(\"Loading aborted: object destroyed\");\r\n            this.segmentRequest = null;\r\n        }\r\n\r\n        this.masterPlaylist = null;\r\n        this.variantPlaylists.clear();\r\n        this.playQueue = [];\r\n\r\n        if (this.settings.assetsStorage !== undefined) {\r\n            await this.settings.assetsStorage.destroy();\r\n        }\r\n\r\n        await this.loader.destroy();\r\n    }\r\n\r\n    private updateSegments(): void {\r\n        if (!this.segmentRequest) {\r\n            return;\r\n        }\r\n\r\n        const segmentLocation = this.getSegmentLocation(\r\n            this.segmentRequest.segmentUrl,\r\n            this.segmentRequest.segmentByteRange\r\n        );\r\n        if (segmentLocation) {\r\n            void this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, false);\r\n        }\r\n    }\r\n\r\n    private onSegmentLoaded = (segment: Segment) => {\r\n        if (\r\n            this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === segment.url &&\r\n            byteRangeToString(this.segmentRequest.segmentByteRange) === segment.range\r\n        ) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.segmentRequest.onSuccess(segment.data!.slice(0), segment.downloadBandwidth);\r\n            this.segmentRequest = null;\r\n        }\r\n    };\r\n\r\n    private onSegmentError = (segment: Segment, error: unknown) => {\r\n        if (\r\n            this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === segment.url &&\r\n            byteRangeToString(this.segmentRequest.segmentByteRange) === segment.range\r\n        ) {\r\n            this.segmentRequest.onError(error);\r\n            this.segmentRequest = null;\r\n        }\r\n    };\r\n\r\n    private onSegmentAbort = (segment: Segment) => {\r\n        if (\r\n            this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === segment.url &&\r\n            byteRangeToString(this.segmentRequest.segmentByteRange) === segment.range\r\n        ) {\r\n            this.segmentRequest.onError(\"Loading aborted: internal abort\");\r\n            this.segmentRequest = null;\r\n        }\r\n    };\r\n\r\n    private getSegmentLocation(\r\n        url: string,\r\n        byteRange: ByteRange\r\n    ): { playlist: Playlist; segmentIndex: number } | undefined {\r\n        for (const playlist of this.variantPlaylists.values()) {\r\n            const segmentIndex = playlist.getSegmentIndex(url, byteRange);\r\n            if (segmentIndex >= 0) {\r\n                return { playlist: playlist, segmentIndex: segmentIndex };\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private async loadSegments(playlist: Playlist, segmentIndex: number, requestFirstSegment: boolean) {\r\n        const segments: Segment[] = [];\r\n        const playlistSegments = playlist.manifest.segments;\r\n        const initialSequence = playlist.manifest.mediaSequence ?? 0;\r\n        let loadSegmentId: string | null = null;\r\n\r\n        let priority = Math.max(0, this.playQueue.length - 1);\r\n\r\n        const masterSwarmId = this.getMasterSwarmId();\r\n\r\n        for (\r\n            let i = segmentIndex;\r\n            i < playlistSegments.length && segments.length < this.settings.forwardSegmentCount;\r\n            ++i\r\n        ) {\r\n            const segment = playlist.manifest.segments[i];\r\n\r\n            const url = playlist.getSegmentAbsoluteUrl(segment.uri);\r\n            const byteRange: ByteRange = segment.byterange;\r\n            const id = this.getSegmentId(playlist, initialSequence + i);\r\n\r\n            segments.push({\r\n                id: id,\r\n                url: url,\r\n                masterSwarmId: masterSwarmId !== undefined ? masterSwarmId : playlist.streamSwarmId,\r\n                masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : playlist.requestUrl,\r\n                streamId: playlist.streamId,\r\n                sequence: (initialSequence + i).toString(),\r\n                range: byteRangeToString(byteRange),\r\n                priority: priority++,\r\n            });\r\n            if (requestFirstSegment && !loadSegmentId) {\r\n                loadSegmentId = id;\r\n            }\r\n        }\r\n\r\n        this.loader.load(segments, playlist.streamSwarmId);\r\n\r\n        if (loadSegmentId) {\r\n            const segment = await this.loader.getSegment(loadSegmentId);\r\n\r\n\r\n\r\n            if (segment) {\r\n                // Segment already loaded by loader\r\n                this.onSegmentLoaded(segment);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getSegmentId(playlist: Playlist, segmentSequence: number): string {\r\n        return `${playlist.streamSwarmId}+${segmentSequence}`;\r\n    }\r\n\r\n    private getMasterSwarmId() {\r\n        const settingsSwarmId =\r\n            this.settings.swarmId && this.settings.swarmId.length !== 0 ? this.settings.swarmId : undefined;\r\n        if (settingsSwarmId !== undefined) {\r\n            return settingsSwarmId;\r\n        }\r\n\r\n        return this.masterPlaylist !== null ? this.masterPlaylist.requestUrl.split(\"?\")[0] : undefined;\r\n    }\r\n\r\n    private getStreamSwarmId(playlistUrl: string): { streamSwarmId: string; found: boolean; index: number } {\r\n        const masterSwarmId = this.getMasterSwarmId();\r\n\r\n        if (this.masterPlaylist && this.masterPlaylist.manifest.playlists && masterSwarmId) {\r\n            for (let i = 0; i < this.masterPlaylist.manifest.playlists.length; ++i) {\r\n                const url = new URL(\r\n                    this.masterPlaylist.manifest.playlists[i].uri,\r\n                    this.masterPlaylist.responseUrl\r\n                ).toString();\r\n                if (url === playlistUrl) {\r\n                    return { streamSwarmId: `${masterSwarmId}+V${i}`, found: true, index: i };\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            streamSwarmId: masterSwarmId ?? playlistUrl.split(\"?\")[0],\r\n            found: false,\r\n            index: -1,\r\n        };\r\n    }\r\n\r\n    private async loadContent(\r\n        url: string,\r\n        range?: string\r\n    ): Promise<Response> {\r\n        const headers = new Headers();\r\n\r\n        if (range) {\r\n            headers.append('Range', range);\r\n        }\r\n\r\n        const fetchPromise = this.fetch(url, { headers });\r\n\r\n        fetchPromise.catch((err) => {\r\n            /**\r\n             * Handling all fetch errors here\r\n             */\r\n\r\n            // console.log(\"SegmentManager fetch error\", { err });\r\n        });\r\n\r\n        return fetchPromise;\r\n    }\r\n}\r\n\r\nclass Playlist {\r\n    public streamSwarmId = \"\";\r\n    public streamId?: string;\r\n\r\n    public constructor(readonly requestUrl: string, readonly responseUrl: string, readonly manifest: Manifest) {}\r\n\r\n    public getSegmentIndex(url: string, byteRange: ByteRange): number {\r\n        for (let i = 0; i < this.manifest.segments.length; ++i) {\r\n            const segment = this.manifest.segments[i];\r\n            const segmentUrl = this.getSegmentAbsoluteUrl(segment.uri);\r\n\r\n            if (url === segmentUrl && compareByteRanges(segment.byterange, byteRange)) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public getSegmentAbsoluteUrl(segmentUrl: string): string {\r\n        return new URL(segmentUrl, this.responseUrl).toString();\r\n    }\r\n}\r\n\r\nclass SegmentRequest {\r\n    public constructor(\r\n        readonly segmentUrl: string,\r\n        readonly segmentByteRange: ByteRange,\r\n        readonly segmentSequence: number,\r\n        readonly playlistRequestUrl: string,\r\n        readonly onSuccess: (content: ArrayBuffer | undefined, downloadBandwidth: number | undefined) => void,\r\n        readonly onError: (error: unknown) => void\r\n    ) {}\r\n}\r\n\r\nexport interface SegmentManagerSettings {\r\n    /**\r\n     * Number of segments for building up predicted forward segments sequence; used to predownload and share via P2P\r\n     */\r\n    forwardSegmentCount: number;\r\n\r\n    /**\r\n     * Override default swarm ID that is used to identify unique media stream with trackers (manifest URL without\r\n     * query parameters is used as the swarm ID if the parameter is not specified)\r\n     */\r\n    swarmId?: string;\r\n\r\n    /**\r\n     * A storage for the downloaded assets: manifests, subtitles, init segments, DRM assets etc. By default the assets are not stored.\r\n     */\r\n    assetsStorage?: AssetsStorage;\r\n}\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["Debug","debug","SMOOTH_INTERVAL","MEASURE_INTERVAL","NumberWithTime","value","timeStamp","BandwidthApproximator","bytes","lastBytes","push","currentBytesSum","shift","interval","Math","min","lastBandwidth","length","maxBandwidth","bandwidth","STEEmitter","FilteredEmitter","HttpMediaManager","settings","Map","fetch","segment","downloadedPieces","isDownloading","console","log","cleanTimedOutFailedSegments","emit","segmentUrl","buildSegmentUrl","fetchAbort","AbortController","fetchRequests","set","id","initialPriority","priority","requestUrl","headers","Headers","range","append","undefined","httpUseRanges","bytesDownloaded","piece","byteLength","signal","fetchRequest","setupFetchEvents","catch","err","name","message","netError","Error","segmentFailure","url","fetchError","request","get","requiredSegmentsPriority","abort","download","delete","has","time","failedSegments","now","size","forEach","clear","__awaiter","fetchResponse","dataReader","body","getReader","contentLengthStr","contentLength","Number","parseFloat","dataBytes","Uint8Array","nextChunkPos","Array","isArray","status","pieceBytes","read","done","chunkBytes","segmentDownloadFinished","buffer","data","responseUrl","segmentValidator","Object","error","httpFailedSegmentTimeout","candidates","performance","localTransport","segmentUrlBuilder","EventEmitter","Peer","Events","P2PMediaManager","MediaPeerSegmentStatus","SegmentsMemoryStorage","defaultSettings","cachedSegmentExpiration","cachedSegmentsCount","useP2P","consumeOnly","simultaneousHttpDownloads","httpDownloadProbability","httpDownloadProbabilityInterval","httpDownloadProbabilitySkipIfNoPeers","httpDownloadMaxPriority","httpDownloadInitialTimeout","httpDownloadInitialTimeoutPerSegment","simultaneousP2PDownloads","p2pDownloadMaxPriority","p2pSegmentDownloadTimeout","webRtcMaxMessageSize","trackerAnnounce","peerRequestsPerAnnounce","rtcConfig","config","HybridLoader","Infinity","segmentsStorage","segments","streamSwarmId","httpRandomDownloadInterval","setInterval","downloadRandomSegmentOverHttp","debugSegments","httpDownloadInitialTimeoutTimestamp","setTimeout","processInitialSegmentTimeout","masterSwarmId","p2pManager","setStreamSwarmId","updateSegmentsMap","segmentsQueue","find","f","httpManager","SegmentAbort","enabled","storageSegments","getSegmentsMap","processSegmentsQueue","cleanSegmentsStorage","sendSegmentsMapToAll","createSegmentsMap","getSegment","peerId","getPeerId","bandwidthApproximator","getBandwidth","clearInterval","destroy","segmentsMap","httpAllowed","firstNotDownloadePriority","httpTimeout","index","updatePriority","isFailed","getActiveDownloadsCount","i","segmentToAbort","getOverallSegmentsMap","Loaded","getPeers","pendingQueue","filter","s","random","floor","method","SegmentStartLoad","addBytes","PieceBytesDownloaded","PieceBytesUploaded","downloadBandwidth","storeSegment","SegmentLoaded","details","SegmentError","SegmentSize","streamId","addSegmentToMap","getStreamSwarmId","segmentId","sequence","segmentsIdsAndStatuses","segmentsStatuses","storageSegment","values","getActiveDownloads","LoadingByHttp","peer","PeerConnect","sendSegmentsMap","PeerClose","incomplete","clean","queueSegment","bufferedSegmentsCount","createHttpManager","on","onSegmentStartLoad","onSegmentLoaded","onSegmentError","onSegmentSize","onPieceBytesDownloaded","createP2PManager","onPieceBytesUploaded","onPeerConnect","onPeerClose","onTrackerUpdate","window","RTCPeerConnection","prototype","createDataChannel","version","Buffer","MediaPeerCommands","DownloadingSegment","MediaPeer","remoteAddress","terminateSegmentRequest","downloadingSegment","pieces","segmentData","offset","JSON","parse","TextDecoder","decode","command","getJsonCommand","receiveSegmentPiece","c","SegmentsMap","m","SegmentRequest","SegmentData","downloadingSegmentId","cancelResponseTimeoutTimer","SegmentAbsent","CancelSegmentRequest","keys","swarmData","segmentsIds","split","segmentStatus","write","stringify","sendCommand","bytesLeft","bytesToSend","from","runResponseTimeoutTimer","timer","cancelSegmentRequest","clearTimeout","onPeerError","onPeerData","Client","sha1","PEER_PROTOCOL_VERSION","PEER_ID_VERSION_STRING","replace","v","parseInt","slice","PEER_ID_VERSION_PREFIX","PeerSegmentRequest","generatePeerId","PEER_ID_SYMBOLS","PEER_ID_LENGTH","charAt","TextEncoder","encode","peers","toString","pendingTrackerClient","isDestroyed","infoHash","update","digest","createClient","trackerClient","clientOptions","announce","port","getAnnounceOpts","numwant","oldTrackerClient","onTrackerError","onTrackerWarning","onTrackerPeer","start","warning","trackerPeer","onPeerDataUpdated","onSegmentRequest","onSegmentAbsent","onSegmentTimeout","peerCandidatesById","peerCandidates","getDownloadingSegmentId","requestSegment","peerSegmentRequests","peerSegmentRequest","swarmChange","stop","removeAllListeners","peerCandidateById","peerCandidate","overallSegmentsMap","connectedPeer","indexOf","splice","key","sendSegmentData","sendSegmentAbsent","description","ArrayBuffer","cache","lastAccessed","cacheItem","lockedSegmentsFilter","segmentsToDelete","remainingSegments","cachedSegment","countOverhead","sort","a","b","event","listener","args","getByteRange","context","rangeEnd","rangeStart","compareByteRanges","b1","b2","byteRangeToString","byteRange","end","SegmentManager","HlsJsLoader","Engine","loader","segmentManager","map","eventKey","engine","callbacks","impl","load","stats","_a","getSettings","getDetails","duration","setPlayingSegment","playheadPosition","setPlayingSegmentByCurrentTime","isSupported","loaded","total","aborted","retry","chunkCount","bwEstimate","loading","first","parsing","buffering","_config","updateStatsToStartLoading","type","result","loadPlaylist","isLoaded","successPlaylist","e","frag","isSegment","updateStart","onUpdateSegmentSize","onUpdateLoaded","_type","loadSegment","content","successSegment","off","warn","abortSegment","onAbort","xhr","response","onSuccess","responseURL","onProgress","onError","initHlsJsPlayer","player","getEngine","initHlsJsEvents","initClapprPlayer","playback","core","getCurrentPlayback","_hls","_p2pm_linitialized","initFlowplayerHlsJsPlayer","hlsjs","hls","initVideoJsContribHlsJsPlayer","ready","options","tech_","options_","hlsjsConfig","initVideoJsHlsJsPlugin","videojs","Html5Hlsjs","addHook","videojsPlayer","initMediaElementJsPlayer","mediaElement","addEventListener","hlsPlayer","media","currentTime","initJwPlayer","iid","assign","_event","errorData","htmlMediaElement","el_","Parser","forwardSegmentCount","swarmId","assetsStorage","segmentRequest","segmentByteRange","onSegmentAbort","parser","playlist","Playlist","manifest","playlists","masterPlaylist","variantPlaylist","variantPlaylists","found","updateSegments","res","getMasterSwarmId","asset","getAsset","responseUri","loadContent","text","storeAsset","masterManifestUri","requestUri","processPlaylist","segmentLocation","getSegmentLocation","byteRangeString","next","arrayBuffer","requestRange","segmentSequence","mediaSequence","segmentIndex","playQueue","previousSegment","promise","Promise","resolve","reject","loadSegments","urlIndex","findIndex","playPosition","currentSegmentPosition","segmentEndTime","getSegmentIndex","requestFirstSegment","playlistSegments","initialSequence","loadSegmentId","max","getSegmentAbsoluteUrl","uri","byterange","getSegmentId","settingsSwarmId","playlistUrl","URL","fetchPromise","playlistRequestUrl"],"sourceRoot":""}